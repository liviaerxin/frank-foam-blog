"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6216],{77047:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/README","metadata":{"permalink":"/journal/README","source":"@site/../../journal/README.md","title":"Private Note or Documents","description":"Why Backend and DevOps Roles May Become One in the Future | HackerNoon","date":"2024-04-05T08:51:17.000Z","formattedDate":"April 5, 2024","tags":[],"readingTime":4.325,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Solid State Drive (SSD) Form Factors","permalink":"/journal/2024/03/25/"}},"content":"[Why Backend and DevOps Roles May Become One in the Future | HackerNoon](https://hackernoon.com/why-backend-and-devops-roles-may-become-one-in-the-future)\\n\\n[How to Put GitHub on Resume in 2023: Complete Guide & Tips](https://www.hiration.com/blog/github-on-resume/)\\n\\n## Job\\n\\nprone to errors\\n\\nbackend engineer\\ninfrastructure\\n\\nVocabulary:\\n- experienced\\n- precedence\\n\\n- promiscuous\\n- reimburse\\n- homogenous\\n- monotonous\\n- snoop\\n\\n## Terminology\\n\\n[Arithmetic](https://en.wikipedia.org/wiki/Arithmetic)\\n\\n## Tech Vocabulary\\n\\n- trivial program\\n- trial program\\n- experienced engineer\\n- division and multiplication **take precedence**\\n\\n## Mathematics Vocabulary\\n\\n- associative\\n- commutative\\n   a \xd7 b = b \xd7 a\\n   a + b = b + a\\n   a ^ b = b ^ a\\n- division\\n   `/`: divide\\n  `%`: mod\\n  dividend / divisor = quotient\\n  dividend % divisor = remainder\\n  dividend / divisor = (quotient) R (remainder) : dividend divided by the divisor has a quotient and a remainder\\n  5 / 3 = 1 R 2: \\n  5 divided by 3 has a quotient of 1 and a remainder of 2\\n\\n## Here\'s a category of topics commonly used in backend software engineering:\\n\\n\\nBackend software engineering interviews often cover a broad range of topics, including data structures, algorithms, system design, database management, networking, and more. Here\'s a categorization of some common terms and topics:\\n\\n1. **Data Structures**:\\n   - Arrays\\n   - Linked Lists\\n   - Stacks\\n   - Queues\\n   - Trees (Binary Trees, Binary Search Trees, AVL Trees, Red-Black Trees, etc.)\\n   - Graphs\\n   - Hash Tables\\n   - Heaps\\n\\n2. **Algorithms**:\\n   - Searching algorithms (Binary search, Linear search, Depth-first search, Breadth-first search)\\n   - Sorting algorithms (Quick sort, Merge sort, Bubble sort, Insertion sort)\\n   - Dynamic programming\\n   - Greedy algorithms\\n   - Recursion\\n   - Graph algorithms (Shortest path algorithms like Dijkstra\'s, Minimum Spanning Tree algorithms like Prim\'s and Kruskal\'s, etc.)\\n\\n3. **Database Management:**\\n   - Relational databases (SQL)\\n   - Non-relational databases (NoSQL)\\n   - ACID properties, transactions, and concurrency control\\n   - Indexing, normalization and denormalization\\n   - Query optimization and performance tuning\\n   - Database Migration\\n\\n4. **Architectural:**\\n   - Microservices\\n\\n5. **Security:**:\\n   - Authentication and authorization\\n   - Encryption\\n   - Man-in-the-middle attacks\\n\\n6. **System Design:**\\n   - Scalability\\n   - Load balancing\\n   - Caching strategies\\n   - Database sharding\\n   - Replication and fault tolerance\\n   - Microservices architecture\\n   - API design\\n   - Message queues and asynchronous processing\\n   - Proxy servers\\n\\n7. **Server:**\\n   - HTTP protocol, RESTful APIs\\n   - Web server concepts (e.g., Nginx, Apache)\\n   - Authentication and authorization (e.g., OAuth, JWT)\\n   - Session management and cookies\\n   - Web security best practices (e.g., SQL injection, XSS)\\n   - ORM\\n     - active record\\n     - data mapper\\n\\n8. **Concurrency and Parallelism:**\\n   - Multi-threading and synchronization\\n   - Locking mechanisms (e.g., mutexes, semaphores)\\n   - Concurrent data structures (e.g., concurrent hash maps, queues)\\n   - Parallel processing frameworks (e.g., MapReduce)\\n\\n9. **Programming Languages and Frameworks:**\\n   - Proficiency in at least one backend programming language (e.g., Java, Python, Go, Node.js)\\n   - Frameworks and libraries commonly used in backend development (e.g., Spring, Django, Express.js)\\n   - Understanding of asynchronous programming and event-driven architectures\\n\\n10. **Python:**\\n   - Data Structure\\n      - list\\n         - `append(v)`, `pop()`: O(1)\\n         - `insert(0, v)`, `pop(0)`: O(n)\\n      - dict\\n      - deque\\n         - `append(v)`, `pop()`: O(1)\\n         - `appendleft(v)`=`insert(0, v)`, `popleft()`=`pop(0)`: O(1)\\n   - Typing\\n   - Interactive shells\\n      - rich\\n      - IPython\\n      - bpython\\n      - ptpython\\n\\n11. **DevOps:**\\n   - Cloud platforms (e.g., AWS, Azure, Google Cloud Platform)\\n   - CI/CD pipelines\\n   - Containerization (e.g., Docker, Kubernetes)\\n   - Monitoring and logging solutions (e.g., Prometheus, ELK stack)\\n\\n12. **Testing:**\\n   - Unit testing\\n   - Integration testing\\n   - End-to-end testing\\n\\n13. **Debugging:**  \\n   - Debugging techniques and tools (e.g., logging, debugginggers)\\n   - Performance profiling and optimization\\n\\n14. **Software Development Practices:**\\n   - Version control systems (e.g., Git)\\n   - Continuous integration and continuous deployment (CI/CD)\\n   - Agile methodologies (e.g., Scrum, Kanban)\\n   - Code review processes and best practices\\n\\n15. **Cloud Computing and DevOps:**\\n   - Cloud platforms (e.g., AWS, Azure, Google Cloud Platform)\\n   - Infrastructure as Code (IaC) tools (e.g., Terraform, CloudFormation)\\n   - Containerization (e.g., Docker, Kubernetes)\\n   - Monitoring and logging solutions (e.g., Prometheus, ELK stack)\\n\\n16. **Other Topics:**\\n    - Design patterns (e.g., singleton, factory, observer)\\n    - Object-oriented design principles\\n    - Memory management and garbage collection\\n    - Networking concepts (e.g., TCP/IP, DNS)\\n\\n17. **Soft Skills:**\\n    - Collaboration\\n    - Problem-solving\\n    - Communication skills\\n    - Teamwork\\n\\nPreparation in these areas can significantly enhance your performance in backend software engineering interviews.\\n\\n## Tech interview\\n\\nhttps://www.techinterviewhandbook.org/\\n\\n## back-end developer interview questions and answers \\n\\nhttps://www.turing.com/interview-questions/back-end\\n\\nhttps://www.interviewkickstart.com/interview-questions/back-end-developer-interview-questions\\n\\nhttps://blog.hubspot.com/website/backend-interview-questions\\n\\n## Is C good choice of language for the interview?\\n\\nhttps://leetcode.com/discuss/general-discussion/536401/is-c-good-choice-of-language-to-have-a-technical-interview\\n\\nhttps://www.linkedin.com/pulse/c-vs-cjavapython-interviews-tushar-dwivedi\\n\\n\\n## Moving company\\n- Finding **a cheap yet reliable** shipping or moving company can be challenging.\\n- Moving from Hong Kong to Canada: Any Recommendations for the Best Affordable Moving Company?\\n\\nrelocation from Hong Kong to Canada\\nremovals to Canada\\nOrganization and a good moving plan are **indispensable** parts of every move\\n\\n\\nhttps://www.transworldrelocation.com/zh-hk/services\\nhttps://www.sevenseasworldwide.com/\\nhttps://www.crownrelo.com/hong-kong/zh-hk/get-a-quote\\n\\n## GPT 3.5 vs GPT 4.0\\n\\n3.5 is used for general purpose, creating an essay.\\n4.0 is more analytical and more logical and more precise.\\n\\nI use 3.5 to create general letters, essays, posts, etc.\\n4.0 is more for deeper questions & outputs.\\n\\n3.5 is much faster than 4.0.\\n\\n\\n[In-Depth Comparison: GPT-4 vs GPT-3.5 \u2013 KanariesDiscord](https://docs.kanaries.net/articles/compare-gpt-4-gpt-3)\\n\\n\\nforemost\\n\\nC is a good language to learn for a career. \\n\\n. It is a foundational/**primitive** language that is still widely used in areas such as operating system, compiler/interpreter and low-level libraries.\\n\\n\\nThanks for listening to my rant.\\n\\n\\n[Ben Hoyt\u2019s Resume/CV](https://benhoyt.com/cv/)\\n\\n## Tech\\n\\nhttps://youtube.com/clip/UgkxedRh7NJJliritCfi-oVUzunSBZavWahd?si=x2W5qQvvHp_IvrR1"},{"id":"/2024/03/25/","metadata":{"permalink":"/journal/2024/03/25/","source":"@site/../../journal/2024-03-25.md","title":"Solid State Drive (SSD) Form Factors","description":"SSD components:","date":"2024-03-25T00:00:00.000Z","formattedDate":"March 25, 2024","tags":[],"readingTime":0.88,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Private Note or Documents","permalink":"/journal/README"},"nextItem":{"title":"Monday, August 14, 2023","permalink":"/journal/2023/08/14/"}},"content":"SSD components:\\n- Controller chips\\n- Memory chips\\n    - NAND Flash particles\\n        - SLC (1 bit/cell)\\n        - MLC (2 bits/cell)\\n        - TLC (3 bits/cell)\\n        - QLC (4 bits/cell)\\n    - Manufactures\\n        - Samsung\\n        - SanDisk\\n        - Micron\\n        - SK Hynix\\n        - Toshiba\\n- Interfaces\\n    - SATA (Serial Advanced Technology Attachment) \\n        - Size\\n            - M.2\\n        - Protocols\\n            - AHCI\\n    - PCIe (PCIe 5.0, 4.0, 3.0) \\n        - Size\\n            - M.2\\n        - Protocols\\n            - AHCI (rarely!)\\n            - NVMe\\n\\n> NOTE\\nData Transfer Protocols: \\n    - AHCI\\n    - NVMe\\n\\n> NOTE\\nM.2 is a size format: about the size and shape of a stick of gum.\\n\\n\\nPopular SSD: PCIe 4.0/M.2/NVMe over 7000MB/s\\n\\nPortal SSD:\\n- SSD (mentioned above)\\n- Protective case\\n    - Durable\\n    - Waterproofing\\n    - Drop resistance\\n    - Heat dissipation\\n    - Compact and portable\\n- Bridge chips\\n- USB-C interface (external) to PCIe/M.2/NVMe interface (internal)\\n- USB-C interface (external) to SATA/M.2/AHCI interface (internal)\\n\\n## Resources\\n\\n[NVMe vs M.2: Bus, Interface, and Protocol - MiniTool Partition Wizard](https://www.partitionwizard.com/clone-disk/nvme-vs-m-2.html)\\n\\n[3 SSD Terminologies You Need to Know when Buying SSD Drive - MiniTool Partition Wizard](https://www.partitionwizard.com/clone-disk/ssd-terminology.html)"},{"id":"/2023/08/14/","metadata":{"permalink":"/journal/2023/08/14/","source":"@site/../../journal/2023-08-14.md","title":"Monday, August 14, 2023","description":"- [ ] Write best ChatGPT prompts","date":"2023-08-14T00:00:00.000Z","formattedDate":"August 14, 2023","tags":[],"readingTime":0.045,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Solid State Drive (SSD) Form Factors","permalink":"/journal/2024/03/25/"},"nextItem":{"title":"Friday, August 4, 2023","permalink":"/journal/2023/08/04/"}},"content":"- [ ] Write best ChatGPT prompts\\n\\nhttps://stackoverflow.com/questions/6760685/creating-a-singleton-in-python\\n\\nhttps://codereview.stackexchange.com/questions/31789/progress-report-for-a-long-running-process-using-yield"},{"id":"/2023/08/04/","metadata":{"permalink":"/journal/2023/08/04/","source":"@site/../../journal/2023-08-04.md","title":"Friday, August 4, 2023","description":"- [ ] Authentication and Authorization in Microservices","date":"2023-08-04T00:00:00.000Z","formattedDate":"August 4, 2023","tags":[],"readingTime":0.55,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Monday, August 14, 2023","permalink":"/journal/2023/08/14/"},"nextItem":{"title":"Wednesday, July 26, 2023","permalink":"/journal/2023/07/26/"}},"content":"- [ ] Authentication and Authorization in Microservices\\n\\n1. Authentication and Authorization in each service\\n2. Authentication in a centralized service, and Authorization in each service\\n3. Authentication and Authorization in a centralized service\\n\\n\\n- [ ] Auth Service and User (Profile) Service\\n\\n[Never write a UserService again. Or when to use external Microservices](https://blog.softwaremill.com/never-write-a-userservice-again-d771e10265d)\\n\\n[Microservices Authentication Best Strategy | Aspecto](https://www.aspecto.io/blog/microservices-authentication-strategies-theory-to-practice/)\\n\\n[Authentication and Authorization Concepts for MicroServices \xb7 GitHub](https://gist.github.com/andineck/0ed33faf686560f71234)\\n\\n[design - Microservice Architecture - using Auth Server as a User Resource server](https://softwareengineering.stackexchange.com/questions/366815/microservice-architecture-using-auth-server-as-a-user-resource-server)\\n\\n[How to Run Your Own Decentralized Authentication Service Using AuthN](https://www.freecodecamp.org/news/how-to-run-your-own-decentralized-authentication-service-using-authn/)\\n\\n- [ ] Implement event-driven architecture microservices using Redis\\n\\n[Using Redis as an Event Store for Communication Between Microservices](https://redis.com/blog/use-redis-event-store-communication-microservices/)"},{"id":"/2023/07/26/","metadata":{"permalink":"/journal/2023/07/26/","source":"@site/../../journal/2023-07-26.md","title":"Wednesday, July 26, 2023","description":"postgres + node + data model(typescript)","date":"2023-07-26T00:00:00.000Z","formattedDate":"July 26, 2023","tags":[],"readingTime":0.09,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Friday, August 4, 2023","permalink":"/journal/2023/08/04/"},"nextItem":{"title":"Tuesday, July 25, 2023","permalink":"/journal/2023/07/25/"}},"content":"postgres + node + data model(typescript)\\n\\n[Build a Data Access Layer with PostgreSQL and Node.js | AppSignal Blog](https://blog.appsignal.com/2022/06/01/build-a-data-access-layer-with-postgres-and-node.html)"},{"id":"/2023/07/25/","metadata":{"permalink":"/journal/2023/07/25/","source":"@site/../../journal/2023-07-25.md","title":"Tuesday, July 25, 2023","description":"- [ ] Authentication and Authorization in Microservices","date":"2023-07-25T00:00:00.000Z","formattedDate":"July 25, 2023","tags":[],"readingTime":1.405,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Wednesday, July 26, 2023","permalink":"/journal/2023/07/26/"},"nextItem":{"title":"Friday, July 21, 2023","permalink":"/journal/2023/07/21/"}},"content":"- [ ] Authentication and Authorization in Microservices\\n\\nAuthentication in microservices involves two main occasions:\\n\\n1. authentication required when end users communicate with services.\\n2. authentication happens between internal services.\\n3. authentication needed when external services enter internal services.\\n\\nOAuth 2.0 provides the industry-standard protocol for authorizing users in distributed systems. The OAuth framework reduces the burden on developers, eliminating duplications to build their own authentication mechanism in each microservice.\\n\\n[Authentication & Authorization in Microservices Architecture - Part I](https://dev.to/behalf/authentication-authorization-in-microservices-architecture-part-i-2cn0)\\n\\nhttps://softwareengineering.stackexchange.com/questions/366815/microservice-architecture-using-auth-server-as-a-user-resource-server\\n\\n\\nhttps://auth0.com/docs/get-started\\n\\n\\n\\n- [ ] User registration flow in microservice\\n\\n\\n- [ ] Communication between microservices\\n\\nShare user data between micro services\\n\\nUser service and Comment service\\n\\npopulate user data into Comment service, save user data in comment service, update user data in comment service\\n\\nhttps://stackoverflow.com/questions/67543408/microservices-storing-user-data-in-separate-database\\n\\nIdeally, the client communicates with the each service directly, and no interaction between the services!\\n\\nHowever, there is the need for communication between these services.\\n\\nFor example, o what happens if a user deletes his account? What if you delete a TV show? You probably want to trigger some events that will update the data in your comment microservice. In the long run you want to keep everything \\"eventually consistent\\".\\n\\nThe event-driven architecture comes up!\\n\\n- [ ] Data retrieved from two or more services\\n\\nFor example, you send a request from UI saying \\"give me comments with usernames\\", \\n\\nGraphQL interface then first issues a request to comments service, then to user service and finally sends one response with combined data\\n> NOTE: issue a number of requests to various micro-services to collect all the data and return it in only 1 response\\n\\n\\nRest needs to send many.\\n\\n\\nhttps://softwareengineering.stackexchange.com/questions/418153/design-a-correct-microservices-architecture-with-data-relations\\n\\n[Event-Driven Data Management for Microservices - NGINX](https://www.nginx.com/blog/event-driven-data-management-microservices/)"},{"id":"/2023/07/21/","metadata":{"permalink":"/journal/2023/07/21/","source":"@site/../../journal/2023-07-21.md","title":"Friday, July 21, 2023","description":"- [ ]  Mysql, redis, or other db connections pool vs as single connection in Nodejs","date":"2023-07-21T00:00:00.000Z","formattedDate":"July 21, 2023","tags":[],"readingTime":0.215,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Tuesday, July 25, 2023","permalink":"/journal/2023/07/25/"},"nextItem":{"title":"Thursday, July 20, 2023","permalink":"/journal/2023/07/20/"}},"content":"- [ ]  Mysql, redis, or other db connections pool vs as single connection in Nodejs\\n\\nSince Node.js and Redis are both effectively single threaded there is no need to use multiple client instances or any pooling mechanism save for a few exceptions;"},{"id":"/2023/07/20/","metadata":{"permalink":"/journal/2023/07/20/","source":"@site/../../journal/2023-07-20.md","title":"Thursday, July 20, 2023","description":"- [ ] HapiJS","date":"2023-07-20T00:00:00.000Z","formattedDate":"July 20, 2023","tags":[],"readingTime":1.035,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Friday, July 21, 2023","permalink":"/journal/2023/07/21/"},"nextItem":{"title":"Wednesday, July 19, 2023","permalink":"/journal/2023/07/19/"}},"content":"- [ ] HapiJS\\n\\n[Hapi.js \u2014 Project Structure and Best Practices (Part 2)](https://medium.com/the-resonant-web/production-ready-hapi-js-starter-kit-part-2-cba358373017)\\n\\n[Optimizing HapiJS for Benchmarks. In the past year or so, our team\u2026 | by Joel Chen | Walmart Global Tech Blog | Medium](https://medium.com/walmartglobaltech/optimizing-hapijs-for-benchmarks-737f371265e9)\\n\\n- [ ] The confused saying in Microservices: \\"each service should own its own database and no two services should share a database\\"\\n\\nNo golden rule, no fast rules, no best practices suitable for all businesses, only `tradeoff`\\n\\nQ: Need separate database per service?\\nA: Creating a separate database for each service helps to enforce **domain boundaries**.\\n\\n[The Hardest Part About Microservices: Your Data \u2013 Software Blog](https://blog.christianposta.com/microservices/the-hardest-part-about-microservices-data/)\\n\\n- [ ] Nodejs development practices\\n\\nSet default configs: author name, author email, author url, the license, and the version. \\n\\n```sh\\nnpm set init.author.name \\"Your name\\"\\nnpm set init.author.email \\"your@email.com\\"\\nnpm set init.author.url \\"https://your-url.com\\"\\nnpm set init.license \\"MIT\\"\\nnpm set init.version \\"1.0.0\\"\\n```\\n\\n```sh\\nfunction node-project {\\n  git init\\n  npx license $(npm get init.license) -o \\"$(npm get init.author.name)\\" > LICENSE\\n  npx gitignore node\\n  npx covgen \\"$(npm get init.author.email)\\"\\n  npm init -y\\n  git add -A\\n  git commit -m \\"Initial commit\\"\\n}\\n```\\n\\n\\nSetting up efficient workflows with ESLint, Prettier and TypeScript in vscode.\\n\\n[Setting up efficient workflows with ESLint, Prettier and TypeScript - JavaScript inDepth](https://indepth.dev/posts/1282/setting-up-efficient-workflows-with-eslint-prettier-and-typescript)"},{"id":"/2023/07/19/","metadata":{"permalink":"/journal/2023/07/19/","source":"@site/../../journal/2023-07-19.md","title":"Wednesday, July 19, 2023","description":"- [ ] I still prefer os.path over Pathlib, as follows","date":"2023-07-19T00:00:00.000Z","formattedDate":"July 19, 2023","tags":[],"readingTime":1.43,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Thursday, July 20, 2023","permalink":"/journal/2023/07/20/"},"nextItem":{"title":"Sunday, July 16, 2023","permalink":"/journal/2023/07/16/"}},"content":"- [ ] I still prefer **os.path** over **Pathlib**, as follows\\n\\n1. Consistency, I\'m used to use path string as an argument between functions and I think **Pathlib** is not flexible enough to handle arguments\\n2. Pure and Function, Although **Pathlib** brings many useful features like `glob`, `stem`, and so on. I still like the concept of simplicity that don\'t put all things together!\\n\\n\\n- [ ] Trim `$` for clipboard copy in **Docusaurus** in code block bash.\\n\\n[Ignore `$ ` for clipboard copy \xb7 Issue #1745 \xb7 facebook/docusaurus \xb7 GitHub](https://github.com/facebook/docusaurus/issues/1745)\\n\\n- [x] Some common issues I often hit when using **git**\\n\\nConfigure username/password for different repos or remotes\\n\\nGlobal configuration\\n\\n```sh\\ngit config --global --list\\ngit config --local --list\\n```\\n\\n\\n**GIT** two popular authentication methods:\\n\\n- ssh key\\n\\n[How to Authenticate Your Git to GitHub with SSH Keys](https://hackernoon.com/how-to-authenticate-your-git-to-github-with-ssh-keys)\\n\\n- git credentials\\n\\nStore username/password instead of ssh for multiple remotes\\n\\nTo enable git credentials\\n\\n```sh\\n# local\\ngit config credential.helper store\\n# global\\ngit config --global credential.helper store\\n```\\n\\nEach credential is stored in `~/.git-credentials` file on its own line as a URL like:\\n\\n```sh\\nhttps://<USERNAME>:<PASSWORD>@github.com\\n```\\n\\nConfigure credentials,\\n\\n```sh\\n# Global\\ngit config --global credential.https://github.com.username <your_username>\\n\\n# Or \\ngit config --local user.name <your_username>\\ngit config --local user.email <your_useremail>\\n# Then git pull or git push to let it cache your username/password after it prompt you to input password in the first time\\n```\\n\\n\\nAlternatively, we can directly edit our global Git config file `~/.gitconfig`,\\n\\n```sh\\n[credential \\"https://github.com\\"]\\n\\tusername = <username>\\n```\\n\\n[Git - Config Username & Password - Store Credentials - ShellHacks](https://www.shellhacks.com/git-config-username-password-store-credentials/)\\n\\n[Configuring Git Credentials](https://www.baeldung.com/ops/git-configure-credentials)\\n\\n- [ ] Programming Algorithms\\n\\nTop Algorithms Every Programmer Should Know\\n\\n[What is Algorithm | Introduction to Algorithms - GeeksforGeeks](https://www.geeksforgeeks.org/introduction-to-algorithms/)"},{"id":"/2023/07/16/","metadata":{"permalink":"/journal/2023/07/16/","source":"@site/../../journal/2023-07-16.md","title":"Sunday, July 16, 2023","description":"Admission program requirements | University of Ottawa","date":"2023-07-16T00:00:00.000Z","formattedDate":"July 16, 2023","tags":[],"readingTime":0.18,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Wednesday, July 19, 2023","permalink":"/journal/2023/07/19/"},"nextItem":{"title":"Thursday, July 14, 2023","permalink":"/journal/2023/07/14/"}},"content":"[Admission program requirements | University of Ottawa](https://www.uottawa.ca/study/graduate-studies/program-specific-requirements)\\n\\n[Faculty of Graduate Studies | University of Calgary](https://grad.ucalgary.ca/future-students/explore-programs)\\n\\n[Graduate Programs - University of Alberta](https://calendar.ualberta.ca/content.php?catoid=39&navoid=12434)\\n\\n[Temporary Foreign Workers - Job Bank](https://www.jobbank.gc.ca/temporary-foreign-workers)\\n\\n20 Common Resume Buzzwords (and What to Use Instead)"},{"id":"/2023/07/14/","metadata":{"permalink":"/journal/2023/07/14/","source":"@site/../../journal/2023-07-14.md","title":"Thursday, July 14, 2023","description":"Best practice:","date":"2023-07-14T00:00:00.000Z","formattedDate":"July 14, 2023","tags":[],"readingTime":1.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Sunday, July 16, 2023","permalink":"/journal/2023/07/16/"},"nextItem":{"title":"Tuesday, July 4, 2023","permalink":"/journal/2023/07/04/"}},"content":"Best practice:\\n\\n- [x] Update markdown metadata such as datetime when saving files\\n    [Introduction | Front Matter](https://frontmatter.codes/docs)\\n\\n- [x] Docusaurus refer code snippets from GitHub repositories\\n    [GitHub - saucelabs/docusaurus-theme-github-codeblock: A Docusaurus v2 plugin that supports referencing code examples from public GitHub repositories.](https://github.com/saucelabs/docusaurus-theme-github-codeblock)\\n\\n    ```js reference\\n    https://github.com/saucelabs/docusaurus-theme-github-codeblock/blob/main/src/theme/ReferenceCodeBlock/index.tsx#L105-L108\\n    ```\\n\\n    ```js reference\\n    https://github.com/liviaerxin/liviaerxin.github.io/blob/560ce03e8dbf5d32b197ccf307ca36af25b5dacd/code-snippets/XKeyIn.cpp#L55-L72\\n    ```\\n\\n- [x] Test-Driven Development mindset involving CI, CD, documentation, iterative deliveries\\n\\n- [x] Create a local volume to bind a specific local folder, only available in `Linux` below.\\n\\n```sh\\ndocker volume create --opt type=none --opt o=bind --opt device=/data/volumes/testvol testvol\\n```\\n\\n```sh\\n\u279c  ~ docker inspect testvol\\n[\\n    {\\n        \\"CreatedAt\\": \\"2023-07-13T04:36:16Z\\",\\n        \\"Driver\\": \\"local\\",\\n        \\"Labels\\": {},\\n        \\"Mountpoint\\": \\"/var/lib/docker/volumes/testvol/_data\\",\\n        \\"Name\\": \\"testvol\\",\\n        \\"Options\\": {\\n            \\"device\\": \\"/data/volumes/testvol\\",\\n            \\"o\\": \\"bind\\",\\n            \\"type\\": \\"none\\"\\n        },\\n        \\"Scope\\": \\"local\\"\\n    }\\n```\\n\\nIn default, the created volume will just sit on `/var/lib/docker/volumes`\\n\\n```sh\\ndocker volume create defaultvol\\n```\\n\\n```sh\\n\u279c  ~ docker volume inspect defaultvol\\n[\\n    {\\n        \\"CreatedAt\\": \\"2023-07-13T04:51:57Z\\",\\n        \\"Driver\\": \\"local\\",\\n        \\"Labels\\": null,\\n        \\"Mountpoint\\": \\"/var/lib/docker/volumes/defaultvol/_data\\",\\n        \\"Name\\": \\"defaultvol\\",\\n        \\"Options\\": null,\\n        \\"Scope\\": \\"local\\"\\n    }\\n\\n```\\n\\n\\n- [ ] Proxies Server: **Traefik** vs **NGINIX**\\n\\nProxies have become an essential networking component and are frequently used with many popular internet services. Proxy servers facilitate requests and responses between end-users and web servers, providing helpful features that augment routing control, privacy, and security. NGINX and Traefik are the most popular tools currently offering proxy functionality. Both solutions can support traditional server-based deployments and containerized application environments, such as Kubernetes. This article will examine both tools in-depth and cover their pros, cons, and distinguishing features.\\n\\n[Traefik vs NGINX: Use Case Comparison](https://www.kubecost.com/kubernetes-devops-tools/traefik-vs-nginx/)"},{"id":"/2023/07/04/","metadata":{"permalink":"/journal/2023/07/04/","source":"@site/../../journal/2023-07-04.md","title":"Tuesday, July 4, 2023","description":"Resumable upload","date":"2023-07-04T00:00:00.000Z","formattedDate":"July 4, 2023","tags":[],"readingTime":0.36,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Thursday, July 14, 2023","permalink":"/journal/2023/07/14/"},"nextItem":{"title":"Monday, July 3, 2023","permalink":"/journal/2023/07/03/"}},"content":"Resumable upload\\n\\n[app_resumable_upload](../code-snippets/python/app_resumable_upload.py)\\n[app_resumable_upload](../code-snippets/python/app_tusd.py)\\n\\n\\n[Implementations | tus.io](https://tus.io/implementations)\\n\\n[Resumable file upload](https://javascript.info/resume-upload)\\n\\n[GitHub - tus/tus-js-client: A pure JavaScript client for the tus resumable upload protocol](https://github.com/tus/tus-js-client)\\n\\n[GitHub - tus/tusd: Reference server implementation in Go of tus: the open protocol for resumable file uploads](https://github.com/tus/tusd)\\n\\nIO, StreamIO, FileIO\\n\\nhigh-level used by asyncio.io in socket/tcp/http:   \\n[Streams \u2014 Python 3.11.4 documentation](https://docs.python.org/3/library/asyncio-stream.html#streamreader)\\n\\nstarlette.Request.stream = http Request Body\\n\\nlow-level:  \\n[io \u2014 Core tools for working with streams \u2014 Python 3.11.4 documentation](https://docs.python.org/3/library/io.html#io.RawIOBase)"},{"id":"/2023/07/03/","metadata":{"permalink":"/journal/2023/07/03/","source":"@site/../../journal/2023-07-03.md","title":"Monday, July 3, 2023","description":"As a backend engineer, there are several core skills that are important for success in the field. These skills include:","date":"2023-07-03T00:00:00.000Z","formattedDate":"July 3, 2023","tags":[],"readingTime":2.79,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Tuesday, July 4, 2023","permalink":"/journal/2023/07/04/"}},"content":"As a backend engineer, there are several core skills that are important for success in the field. These skills include:\\n\\n1. Programming languages: Proficiency in one or more programming languages is crucial for backend development. Common languages for backend engineering include Python, Java, C#, Ruby, and JavaScript (Node.js). It\'s important to have a strong understanding of data structures, algorithms, and object-oriented programming concepts.\\n\\n2. Web frameworks: Familiarity with backend web frameworks is essential. Depending on the language you work with, you should be proficient in frameworks such as Django (Python), Spring (Java), ASP.NET (C#), Ruby on Rails (Ruby), or Express.js (Node.js). These frameworks provide tools and libraries for building robust web applications and services.\\n\\n3. Databases and query languages: Backend engineers often work with databases to store and retrieve data. Understanding relational databases like MySQL, PostgreSQL, or Oracle, as well as NoSQL databases like MongoDB or Redis, is valuable. Additionally, knowledge of SQL (Structured Query Language) for database querying is important.\\n\\n4. API development and integration: Backend engineers frequently design and build APIs (Application Programming Interfaces) to enable communication between different systems and services. You should have experience in designing and implementing RESTful APIs and be familiar with tools like Swagger or OpenAPI.\\n\\n5. Server management and deployment: Understanding server management and deployment processes is essential. Familiarity with cloud platforms like AWS (Amazon Web Services), Azure, or Google Cloud, as well as containerization technologies like Docker and orchestration tools like Kubernetes, is valuable.\\n\\n6. Security and scalability: Backend engineers need to have a strong understanding of security principles to develop secure applications. Knowledge of authentication and authorization mechanisms, data encryption, and handling user input securely is important. Additionally, understanding scalability concepts and techniques for handling high traffic and load balancing can be beneficial.\\n\\n7. Testing and debugging: Proficiency in testing and debugging is crucial to ensure the reliability and stability of backend systems. Knowledge of unit testing frameworks, integration testing, and debugging tools is important to identify and fix issues efficiently.\\n\\n8. Version control systems: Proficiency in version control systems like Git is essential for collaboration and managing code repositories. Understanding branching, merging, and pull requests is important to work effectively in a team.\\n\\n9. Continuous Integration and Continuous Deployment (CI/CD): Familiarity with CI/CD practices and tools like Jenkins, Travis CI, or CircleCI is valuable. Knowledge of automated testing, build pipelines, and deployment workflows is important to streamline development processes.\\n\\n10. Problem-solving and analytical thinking: Backend engineers often face complex problems that require analytical thinking and problem-solving skills. The ability to analyze requirements, break down problems into manageable tasks, and devise efficient solutions is highly valuable.\\n\\nRemember, the specific skills required may vary depending on the organization, industry, and technology stack being used. It\'s important to stay updated with emerging technologies and trends in backend development to remain competitive in the job market.\\n\\n\\nWhy Google Search Journey?\\n\\nGoogle Search Journey groups pages from your search histories by topic or intent, providing a more helpful user experience than just showing a chronological list of pages.\\n\\nSearch can, at times, become a rabbit hole. A user may start out looking to book a trip but then get distracted by work or life- or doing several related searches for things they\'ll need for that trip - and totally forget to book the actual trip.\\n\\nPractice programming skills\\n\\n- leetcode\\n- codewars"}]}')}}]);