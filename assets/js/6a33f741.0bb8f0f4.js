"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2001],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>c});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),m=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=m(t.components);return n.createElement(p.Provider,{value:e},t.children)},d="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),d=m(a),k=r,c=d["".concat(p,".").concat(k)]||d[k]||u[k]||l;return a?n.createElement(c,i(i({ref:e},s),{},{components:a})):n.createElement(c,i({ref:e},s))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[d]="string"==typeof t?t:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},69412:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const l={authors:["frank"],tags:["arm64","aarch64","cheat sheet"],description:"Cheatsheet ARM64",keywords:["AArch64","ARM64","Cheat sheet"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-01-14T00:00:00.000Z"),draft:!1,enableComments:!0},i="ARM64/AArch64 Assembly Cheat Sheet",o={permalink:"/blog/cheatsheet-assembly-arm64",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/cheatsheet-assembly-arm64.mdx",source:"@site/../../blog/cheatsheet-assembly-arm64.mdx",title:"ARM64/AArch64 Assembly Cheat Sheet",description:"Cheatsheet ARM64",date:"2024-01-14T00:00:00.000Z",formattedDate:"January 14, 2024",tags:[{label:"arm64",permalink:"/blog/tags/arm-64"},{label:"aarch64",permalink:"/blog/tags/aarch-64"},{label:"cheat sheet",permalink:"/blog/tags/cheat-sheet"}],readingTime:1.86,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{authors:["frank"],tags:["arm64","aarch64","cheat sheet"],description:"Cheatsheet ARM64",keywords:["AArch64","ARM64","Cheat sheet"],image:"https://i.imgur.com/mErPwqL.png",date:"2024-01-14T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Network Cheat Sheet",permalink:"/blog/cheatsheet-network"},nextItem:{title:"x64 Assembly Cheat Sheet",permalink:"/blog/cheatsheet-assembly-x64"}},p={authorsImageUrls:[void 0]},m=[{value:"Registers",id:"registers",level:2},{value:"Data type",id:"data-type",level:2},{value:"Load from immediate",id:"load-from-immediate",level:2},{value:"Load from label",id:"load-from-label",level:2},{value:"Store",id:"store",level:2},{value:"Resources",id:"resources",level:2}],s={toc:m},d="wrapper";function u(t){let{components:e,...a}=t;return(0,r.kt)(d,(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"registers"},"Registers"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Register"),(0,r.kt)("th",{parentName:"tr",align:null},"Low 32-bits"),(0,r.kt)("th",{parentName:"tr",align:null},"Calling convention"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"General-purpose registers:"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"w0")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"w1")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"w2")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Special-purpose registers:"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"xzr")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"wzr")),(0,r.kt)("td",{parentName:"tr",align:null},"Zero register")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sp")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Stack pointer")))),(0,r.kt)("h2",{id:"data-type"},"Data type"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Definition size"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition instruction"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8 bit"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"byte"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16 bit"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hword"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"32 bit"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"word"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"64 bit"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dword"))))),(0,r.kt)("h2",{id:"load-from-immediate"},"Load from immediate"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"movz"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"mov")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"movk")),(0,r.kt)("p",null,"Load the 64-bit integer ",(0,r.kt)("inlineCode",{parentName:"p"},"0x1a2b3c4d1a2b3c4d")," from the immediate,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm"},"// Load the 64-bit integer `0x1a2b3c4d1a2b3c4d` from the immediate\nmovz     x1, #0x3c4d\nmovk    x1, #0x1a2b, lsl #16\nmovk    x1, #0x3c4d, lsl #32\nmovk    x1, #0x1a2b, lsl #48\n")),(0,r.kt)("h2",{id:"load-from-label"},"Load from label"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Load instruction"),(0,r.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ldr    x0, [x1]")),(0,r.kt)("td",{parentName:"tr",align:null},"load 64-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ldr    w0, [x1]")),(0,r.kt)("td",{parentName:"tr",align:null},"load 32-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ldrh    w0, [x1]")),(0,r.kt)("td",{parentName:"tr",align:null},"load 16-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ldrb    w0, [x1]")),(0,r.kt)("td",{parentName:"tr",align:null},"load 8-bit")))),(0,r.kt)("p",null,"Assume the 32-bit data in ",(0,r.kt)("inlineCode",{parentName:"p"},".data")," section,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm"},".data\n    int32_var:  .word   0x1a2b3c4d\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"adr"),": shift by byte(\xb11M, one instruction), the assembler will do:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"calculate the PC-relative offset from the current ",(0,r.kt)("inlineCode",{parentName:"li"},"adr")," instruction to the label ",(0,r.kt)("inlineCode",{parentName:"li"},"int32_var")," in bytes."),(0,r.kt)("li",{parentName:"ul"},"encode the offset in the ",(0,r.kt)("inlineCode",{parentName:"li"},"adr")," instruction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm"},"adr     x20, int32_var\nldr     x2, [x20]\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"adrp")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),": shift by 4KB page(\xb14G, two instructions), the assembler will do:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"calculate the PC-relative offset from the current ",(0,r.kt)("inlineCode",{parentName:"li"},"adr")," instruction to the label ",(0,r.kt)("inlineCode",{parentName:"li"},"int32_var")," in page.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"calculate the PC-relative offset in bytes."),(0,r.kt)("li",{parentName:"ul"},"divide the byte offset using 4096(or right shift 12 bits), now the quotient is page offset"))),(0,r.kt)("li",{parentName:"ul"},"encode the page offset in the ",(0,r.kt)("inlineCode",{parentName:"li"},"adrp")," instruction."),(0,r.kt)("li",{parentName:"ul"},"encode the lower 12 bits in the ",(0,r.kt)("inlineCode",{parentName:"li"},"add")," instruction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm"},"adrp    x20, int32_var\nadd     x20, x20, :lo12:int32_var\nldr    x2, [x20]\n")),(0,r.kt)("p",null,"or more simply,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm"},"adrp    x20, int32_var\nldr    x2, [x20, :lo12:int32_var]\n")),(0,r.kt)("p",null,"in macOS m1,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm"},"adrp    x20, int32_var@PAGE\nadd     x20, x20, int32_var@PAGEOFF\nldr    x2, [x20]\n")),(0,r.kt)("h2",{id:"store"},"Store"),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md"},"ios-resources/bits/arm64.md at master \xb7 Siguza/ios-resources \xb7 GitHub")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/pkivolowitz/asm_book/blob/main/section_1/regs/ldr.md"},"asm_book/section_1/regs/ldr.md at main \xb7 pkivolowitz/asm_book \xb7 GitHub")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://thinkingeek.com/2016/11/13/exploring-aarch64-assembler-chapter-5/"},"Exploring AArch64 assembler \u2013 Chapter 5")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://peterdn.com/post/2020/08/22/hello-world-in-arm64-assembly/"},"https://peterdn.com/post/2020/08/22/hello-world-in-arm64-assembly/")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://gpanders.com/blog/exploring-mach-o-part-1/"},"https://gpanders.com/blog/exploring-mach-o-part-1/")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://iitd-plos.github.io/col718/ref/arm-instructionset.pdf"},"https://iitd-plos.github.io/col718/ref/arm-instructionset.pdf")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://modexp.wordpress.com/2018/10/30/arm64-assembly/#registers"},"https://modexp.wordpress.com/2018/10/30/arm64-assembly/#registers")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/41906688/what-are-the-semantics-of-adrp-and-adrl-instructions-in-arm-assembly"},"https://stackoverflow.com/questions/41906688/what-are-the-semantics-of-adrp-and-adrl-instructions-in-arm-assembly")))}u.isMDXComponent=!0}}]);