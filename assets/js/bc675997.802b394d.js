"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,k=d["".concat(s,".").concat(c)]||d[c]||u[c]||a;return n?r.createElement(k,o(o({ref:t},m),{},{components:n})):r.createElement(k,o({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},39809:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={authors:["frank"],tags:["qemu","raspberry-pi","osx"],description:"QEMU emulate Raspberry Pi 3/4",keywords:["QEMU Raspberry Pi 3/4"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-09-23T00:00:00.000Z"),draft:!1,enableComments:!0},o="QEMU Emulate Raspberry Pi 3 and 4",l={permalink:"/blog/qemu-raspberry-pi",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/qemu-raspberry-pi.mdx",source:"@site/../../blog/qemu-raspberry-pi.mdx",title:"QEMU Emulate Raspberry Pi 3 and 4",description:"QEMU emulate Raspberry Pi 3/4",date:"2023-09-23T00:00:00.000Z",formattedDate:"September 23, 2023",tags:[{label:"qemu",permalink:"/blog/tags/qemu"},{label:"raspberry-pi",permalink:"/blog/tags/raspberry-pi"},{label:"osx",permalink:"/blog/tags/osx"}],readingTime:8.345,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{authors:["frank"],tags:["qemu","raspberry-pi","osx"],description:"QEMU emulate Raspberry Pi 3/4",keywords:["QEMU Raspberry Pi 3/4"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-09-23T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"QEMU Direct Linux Kernel Boot",permalink:"/blog/qemu-linux-kernel-boot"},nextItem:{title:"How to mount ISO image file",permalink:"/blog/how-to-mount-iso-file"}},s={authorsImageUrls:[void 0]},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Raspberry Pi image",id:"raspberry-pi-image",level:2},{value:"Docker Ubuntu container",id:"docker-ubuntu-container",level:2},{value:"Extracting Kernel and device tree",id:"extracting-kernel-and-device-tree",level:2},{value:"Setting up default user",id:"setting-up-default-user",level:2},{value:"Running QEMU",id:"running-qemu",level:2},{value:"Emulate Raspberry Pi 3",id:"emulate-raspberry-pi-3",level:3},{value:"Emulate Raspberry Pi 4 with <code>virt</code>",id:"emulate-raspberry-pi-4-with-virt",level:3},{value:"For <code>SCSI hard disk</code>",id:"for-scsi-hard-disk",level:4},{value:"For <code>virtual disk</code> storage device",id:"for-virtual-disk-storage-device",level:4},{value:"For <code>NVMe</code> storage device",id:"for-nvme-storage-device",level:4},{value:"For <code>usb storage</code>",id:"for-usb-storage",level:4},{value:"Test Raspberry Pi VM",id:"test-raspberry-pi-vm",level:2},{value:"Resources",id:"resources",level:2}],m={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this blog, ",(0,i.kt)("strong",{parentName:"p"},"QEMU")," is employed to emulate ",(0,i.kt)("strong",{parentName:"p"},"Raspberry Pi 3/4")," in ",(0,i.kt)("strong",{parentName:"p"},"mac M1")," host(it's also supposed to work in ",(0,i.kt)("strong",{parentName:"p"},"Windows/Linux")," with a little tweak). I will demonstrate ",(0,i.kt)("strong",{parentName:"p"},"two")," different ways to emulate ",(0,i.kt)("strong",{parentName:"p"},"Raspberry Pi 3")," and ",(0,i.kt)("strong",{parentName:"p"},"Raspberry Pi 4")," in respect. These two ways are different by using different ",(0,i.kt)("strong",{parentName:"p"},"QEMU machines")," as you would like to use:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"-machine raspi3b"),": raspberry pi 3b machine to emulate ",(0,i.kt)("strong",{parentName:"li"},"Raspberry Pi 3"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"-machine virt"),": general arm machine to emulate ",(0,i.kt)("strong",{parentName:"li"},"Raspberry Pi 4"),".")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In mac M1 with setting ",(0,i.kt)("inlineCode",{parentName:"p"},"-machine virt"),", I use the hardware acceleration by ",(0,i.kt)("inlineCode",{parentName:"p"},"-accel hvf"),". In Windows(x86_64), the hardware acceleration for ",(0,i.kt)("inlineCode",{parentName:"p"},"aarch64")," is not available, so removing the hardware acceleration will work as well in Windows.")),(0,i.kt)("p",null,"For both of these two, we still need prepare some common steps before running ",(0,i.kt)("strong",{parentName:"p"},"QEMU"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Extract the appropriate kernel, device tree or root filesystem")),(0,i.kt)("p",null,"This blog will emulate Raspberry Pi using QEMU in mac M1 host using the new image ",(0,i.kt)("inlineCode",{parentName:"p"},"2023-05-03-raspios-bullseye-arm64-lite.img"),"."),(0,i.kt)("p",null,"The default ",(0,i.kt)("inlineCode",{parentName:"p"},"user:pi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password:raspberry")," have been removed from this image. In order to log in, we have to write ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," to the image before booting. These steps can be skipped when booting previous images."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Docker"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"be required in macOS"),(0,i.kt)("li",{parentName:"ul"},"can be skipped in Linux"),(0,i.kt)("li",{parentName:"ul"},"can use ",(0,i.kt)("inlineCode",{parentName:"li"},"wsl")," as an alternative in Windows"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"QEMU"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"homebrew")," install in macOS"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Raspberry Pi image"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"2023-05-03-raspios-bullseye-arm64-lite.img"))),(0,i.kt)("p",null,"Since I am in mac M1, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"raspberry pi")," image which contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"fat")," filesystem as boot and a ",(0,i.kt)("inlineCode",{parentName:"p"},"ext4")," filesystem as OS, we need write some configuration into it. So I will use a ",(0,i.kt)("strong",{parentName:"p"},"Docker Ubuntu")," container to do the operation on the the filesystem. There some other tools to do the like of these operations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ext4fuse")," is free and easy to install via ",(0,i.kt)("inlineCode",{parentName:"li"},"homebrew"),", but it has limit as read-only access."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ExtFS")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"Paragon")," supports read-write access while you need pay for it."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"virtual machine"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Docker")," in OSX make use of ",(0,i.kt)("inlineCode",{parentName:"li"},"virtual machine")," while it is quick and flexible to use.")))),(0,i.kt)("h2",{id:"raspberry-pi-image"},"Raspberry Pi image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cd ~\nwget https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2023-05-03/2023-05-03-raspios-bullseye-arm64-lite.img.xz\nxz -d 2023-05-03-raspios-bullseye-arm64-lite.img.xz\n")),(0,i.kt)("h2",{id:"docker-ubuntu-container"},"Docker Ubuntu container"),(0,i.kt)("p",null,"Mount the ",(0,i.kt)("strong",{parentName:"p"},"folder")," including ",(0,i.kt)("inlineCode",{parentName:"p"},"2023-05-03-raspios-bullseye-arm64-lite.img")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -it -d --privileged -v $PWD:/qemu --name ubuntu ubuntu\ndocekr exec -it ubuntu bash\n")),(0,i.kt)("h2",{id:"extracting-kernel-and-device-tree"},"Extracting Kernel and device tree"),(0,i.kt)("p",null,"Operations all in Ubuntu container."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# fdisk -l 2023-05-03-raspios-bullseye-arm64-lite.img \nDisk 2023-05-03-raspios-bullseye-arm64-lite.img: 1.96 GiB, 2101346304 bytes, 4104192 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x544c6228\n\nDevice                                      Boot  Start     End Sectors  Size Id Type\n2023-05-03-raspios-bullseye-arm64-lite.img1        8192  532479  524288  256M  c W95 FAT32 (LBA)\n2023-05-03-raspios-bullseye-arm64-lite.img2      532480 4104191 3571712  1.7G 83 Linux\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first partition is boot filesystem."),(0,i.kt)("li",{parentName:"ul"},"The second partition is real root filesystem.")),(0,i.kt)("p",null,"All the data we need is in the first partition, to do the operation is mounting it."),(0,i.kt)("p",null,"The offset of the first partition: 8192 * 512 = 4194304,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# mount -o loop,offset=4194304 2023-05-03-raspios-bullseye-arm64-lite.img /mnt/rpi-boot/\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# ls -ls /mnt/rpi-boot/\ntotal 30244\n  20 -rwxr-xr-x 1 root root   18693 Apr  5 11:32 COPYING.linux\n   2 -rwxr-xr-x 1 root root    1594 Apr  5 11:32 LICENCE.broadcom\n  30 -rwxr-xr-x 1 root root   30390 Apr  5 11:32 bcm2710-rpi-2-b.dtb\n  32 -rwxr-xr-x 1 root root   32753 Apr  5 11:32 bcm2710-rpi-3-b-plus.dtb\n  32 -rwxr-xr-x 1 root root   32142 Apr  5 11:32 bcm2710-rpi-3-b.dtb\n  30 -rwxr-xr-x 1 root root   30285 Apr  5 11:32 bcm2710-rpi-cm3.dtb\n  32 -rwxr-xr-x 1 root root   31318 Apr  5 11:32 bcm2710-rpi-zero-2-w.dtb\n  32 -rwxr-xr-x 1 root root   31318 Apr  5 11:32 bcm2710-rpi-zero-2.dtb\n  52 -rwxr-xr-x 1 root root   52593 Apr  5 11:32 bcm2711-rpi-4-b.dtb\n  52 -rwxr-xr-x 1 root root   52682 Apr  5 11:32 bcm2711-rpi-400.dtb\n  38 -rwxr-xr-x 1 root root   38182 Apr  5 11:32 bcm2711-rpi-cm4-io.dtb\n  52 -rwxr-xr-x 1 root root   53202 Apr  5 11:32 bcm2711-rpi-cm4.dtb\n  50 -rwxr-xr-x 1 root root   50504 Apr  5 11:32 bcm2711-rpi-cm4s.dtb\n  52 -rwxr-xr-x 1 root root   52476 Apr  5 11:32 bootcode.bin\n   2 -rwxr-xr-x 1 root root     154 May  3 03:11 cmdline.txt\n   4 -rwxr-xr-x 1 root root    2109 May  3 02:53 config.txt\n  ...\n   2 -rwxr-xr-x 1 root root     145 May  3 03:11 issue.txt\n8028 -rwxr-xr-x 1 root root 8219600 Apr  5 11:32 kernel8.img\n  ...\n")),(0,i.kt)("p",null,"To run QEMU we will need the ",(0,i.kt)("strong",{parentName:"p"},"kernel")," and ",(0,i.kt)("strong",{parentName:"p"},"device tree"),", so let\u2019s copy them out:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# cp /mnt/rpi-boot/kernel8.img .\nroot@f36a3251391d:/qemu# cp /mnt/rpi-boot/bcm2710-rpi-3-b.dtb .\n")),(0,i.kt)("h2",{id:"setting-up-default-user"},"Setting up default user"),(0,i.kt)("p",null,"Operations all in docker container."),(0,i.kt)("p",null,"Now in order to set up user and enable ssh in default, we need write files into ",(0,i.kt)("inlineCode",{parentName:"p"},"/userconf")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/ssh")," under the boot filesystem mounted as ",(0,i.kt)("inlineCode",{parentName:"p"},"/mnt/rpi-boot/"),"."),(0,i.kt)("p",null,"Set up a default ",(0,i.kt)("inlineCode",{parentName:"p"},"user:pi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password:raspberry"),"."),(0,i.kt)("p",null,"Hash password ",(0,i.kt)("inlineCode",{parentName:"p"},"raspberry")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"openssl"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# openssl passwd\nPassword: \nVerifying - Password: \n$1$d...AvcL$wqfUqTIauUP1TVJ/uU1td0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# echo 'pi:$1$d...AvcL$wqfUqTIauUP1TVJ/uU1td0' | tee /mnt/rpi-boot/userconf\n")),(0,i.kt)("p",null,"Enable ",(0,i.kt)("inlineCode",{parentName:"p"},"ssh"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# touch /mnt/rpi-boot/ssh\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"root@f36a3251391d:/qemu# umount /mnt/rpi-boot\n")),(0,i.kt)("h2",{id:"running-qemu"},"Running QEMU"),(0,i.kt)("h3",{id:"emulate-raspberry-pi-3"},"Emulate Raspberry Pi 3"),(0,i.kt)("p",null,"Now switch back to the host macOS to run ",(0,i.kt)("inlineCode",{parentName:"p"},"QEMU"),","),(0,i.kt)("p",null,"Resize the image to the next power of 2 size,"),(0,i.kt)("p",null,"The original size,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\u276f stat -f%z 2023-05-03-raspios-bullseye-arm64-lite.img\n2101346304\n")),(0,i.kt)("p",null,"To resize to ",(0,i.kt)("inlineCode",{parentName:"p"},"4GB"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"qemu-img resize ./2023-05-03-raspios-bullseye-arm64-lite.img 4G\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'qemu-system-aarch64 \\\n    -machine raspi3b \\\n    -cpu cortex-a72 \\\n    -nographic \\\n    -m 1G \\\n    -smp 4 \\\n    -dtb bcm2710-rpi-3-b.dtb \\\n    -kernel kernel8.img \\\n    -append "rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=/dev/mmcblk0p2 rootdelay=1" \\\n    -netdev user,id=net0,hostfwd=tcp::2222-:22 \\\n    -device usb-net,netdev=net0 \\\n    -sd 2023-05-03-raspios-bullseye-arm64-lite.img\n')),(0,i.kt)("p",null,"Options in detail:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-machine raspi3b"),": use raspberry pi 3 machine."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-append"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"console=ttyAMA0"),": output the ",(0,i.kt)("strong",{parentName:"li"},"VM")," std to ",(0,i.kt)("strong",{parentName:"li"},"QEMU")," console."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"root=/dev/mmcblk0p2"),": mount ",(0,i.kt)("strong",{parentName:"li"},"real root filesystem")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"/dev/mmcblk0p2"),"(the second partition of ",(0,i.kt)("inlineCode",{parentName:"li"},"mmcblk0"),") as we ",(0,i.kt)("inlineCode",{parentName:"li"},"-sd xx")," will be mounted to ",(0,i.kt)("inlineCode",{parentName:"li"},"/dev/mmcblk0"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-netdev user,id=net0,hostfwd=tcp::2222-:22"),": network mapping host port ",(0,i.kt)("inlineCode",{parentName:"li"},"2222")," to the ",(0,i.kt)("strong",{parentName:"li"},"VM")," ",(0,i.kt)("inlineCode",{parentName:"li"},"22")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-device usb-net,netdev=net0"),": expose ",(0,i.kt)("inlineCode",{parentName:"li"},"netdev=net0")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"usb-net")," in the raspberry pi 3 machine."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-sd 2023-05-03-raspios-bullseye-arm64-lite.img"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"sd")," drive is available in the raspberry pi 3 machine.")),(0,i.kt)("h3",{id:"emulate-raspberry-pi-4-with-virt"},"Emulate Raspberry Pi 4 with ",(0,i.kt)("inlineCode",{parentName:"h3"},"virt")),(0,i.kt)("p",null,"We will use generic virtual machine ",(0,i.kt)("inlineCode",{parentName:"p"},"virt")," to act as ",(0,i.kt)("inlineCode",{parentName:"p"},"raspi4"),", since there is no ",(0,i.kt)("inlineCode",{parentName:"p"},"raspi4")," machine defined in QEMU official machines. However you can still use ",(0,i.kt)("inlineCode",{parentName:"p"},"raspi3")," to act as ",(0,i.kt)("inlineCode",{parentName:"p"},"raspi4")," as they are same!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Acceleration")," can be enable in ",(0,i.kt)("inlineCode",{parentName:"p"},"virt")," machine by using ",(0,i.kt)("inlineCode",{parentName:"p"},"-accel hvf")," option in my ",(0,i.kt)("strong",{parentName:"p"},"mac M1")," host as it's ",(0,i.kt)("strong",{parentName:"p"},"arm-based"),"."),(0,i.kt)("p",null,"So ",(0,i.kt)("inlineCode",{parentName:"p"},"virt")," will bring high performance and increase efficiency!"),(0,i.kt)("p",null,"After tuning options and searching from many resources, the operational setting for QEMU to emulate is,"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"ubuntu-22.04.3-preinstalled-server-arm64+raspi.img"),", of which the default user is ",(0,i.kt)("inlineCode",{parentName:"li"},"ubuntu")," and password is ",(0,i.kt)("inlineCode",{parentName:"li"},"ubuntu"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'kernel="$PWD/ubuntu-22.04.3-preinstalled-server-arm64+raspi-boot/vmlinuz"\ninitrd="$PWD/ubuntu-22.04.3-preinstalled-server-arm64+raspi-boot/initrd.img"\nimg="$PWD/ubuntu-22.04.3-preinstalled-server-arm64+raspi.img"\n')),(0,i.kt)("h4",{id:"for-scsi-hard-disk"},"For ",(0,i.kt)("inlineCode",{parentName:"h4"},"SCSI hard disk")),(0,i.kt)("p",null,"This storage device file will be named ",(0,i.kt)("inlineCode",{parentName:"p"},"/dev/sdX"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'qemu-system-aarch64 \\\n    -machine virt \\\n    -accel hvf \\\n    -cpu host \\\n    -smp 4 \\\n    -m 4G \\\n    -nographic \\\n    -kernel $kernel \\\n    -initrd $initrd \\\n    -append "earlyprintk loglevel=8 root=/dev/sda2 rootfstype=ext4 rw console=ttyAMA0" \\\n    -drive file=$img,format=raw,if=none,id=drive0 \\\n    -device virtio-scsi-pci,id=scsi \\\n    -device scsi-hd,drive=drive0,bus=scsi.0 \\\n    -netdev user,id=mynet,hostfwd=tcp::2222-:22 \\\n    -device virtio-net-pci,netdev=mynet\n')),(0,i.kt)("p",null,"Options in detail:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-accel hvf"),": ",(0,i.kt)("strong",{parentName:"li"},"hardware acceleration")," in mac M1. Don't use in ",(0,i.kt)("strong",{parentName:"li"},"x86_64")," host."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-cpu host"),": change to ",(0,i.kt)("inlineCode",{parentName:"li"},"-cpu cortex-a72")," when no ",(0,i.kt)("strong",{parentName:"li"},"hardware acceleration")," available such as in ",(0,i.kt)("strong",{parentName:"li"},"x86_64")," host."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-append"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"root=/dev/sda2"),": the second partition of the ",(0,i.kt)("inlineCode",{parentName:"li"},"ubuntu-22.04.3-preinstalled-server-arm64+raspi.img")," disk image hold the real root filesystem."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-initrd $initrd"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the boot loader works using configuration like ",(0,i.kt)("inlineCode",{parentName:"li"},"vmlinuz initrd=initrd.img root=/dev/sda2"),".")))),(0,i.kt)("h4",{id:"for-virtual-disk-storage-device"},"For ",(0,i.kt)("inlineCode",{parentName:"h4"},"virtual disk")," storage device"),(0,i.kt)("p",null,"This storage device file will be named ",(0,i.kt)("inlineCode",{parentName:"p"},"/dev/vdX"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'qemu-system-aarch64 \\\n    -machine virt \\\n    -accel hvf \\\n    -cpu host \\\n    -smp 4 \\\n    -m 4G \\\n    -nographic \\\n    -kernel $kernel \\\n    -initrd $initrd \\\n    -append "earlyprintk loglevel=8 root=/dev/vda2 rootfstype=ext4 rw console=ttyAMA0" \\\n    -drive file=$img,format=raw,if=none,id=drive0 \\\n    -device virtio-blk-pci,drive=drive0 \\\n    -netdev user,id=mynet,hostfwd=tcp::2222-:22 \\\n    -device virtio-net-pci,netdev=mynet\n')),(0,i.kt)("h4",{id:"for-nvme-storage-device"},"For ",(0,i.kt)("inlineCode",{parentName:"h4"},"NVMe")," storage device"),(0,i.kt)("p",null,"This storage device file will be named ",(0,i.kt)("inlineCode",{parentName:"p"},"/dev/nvmeX"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'qemu-system-aarch64 \\\n    -machine virt \\\n    -accel hvf \\\n    -cpu host \\\n    -smp 4 \\\n    -m 4G \\\n    -nographic \\\n    -kernel $kernel \\\n    -append "earlyprintk loglevel=8 root=/dev/nvme0n1p2 rootfstype=ext4 rw console=ttyAMA0" \\\n    -drive file=$img,format=raw,if=none,id=drive0 \\\n    -device nvme,drive=drive0,serial=deadbeaf1 \\\n    -netdev user,id=mynet,hostfwd=tcp::2222-:22 \\\n    -device virtio-net-pci,netdev=mynet\n')),(0,i.kt)("p",null,"Options in detail:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"no ",(0,i.kt)("inlineCode",{parentName:"li"},"-initrd $initrd"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the boot loader works using configuration like ",(0,i.kt)("inlineCode",{parentName:"li"},"vmlinuz root=/dev/nvme0n1p2"),"."),(0,i.kt)("li",{parentName:"ul"},"we directly mount the real filesystem ",(0,i.kt)("inlineCode",{parentName:"li"},"/dev/nvme0n1p2"),", skipping to mount the ",(0,i.kt)("strong",{parentName:"li"},"initial RAM disk"),"."),(0,i.kt)("li",{parentName:"ul"},"I test other type storage device must binding ",(0,i.kt)("inlineCode",{parentName:"li"},"-initrd $initrd")," while there is no need for ",(0,i.kt)("inlineCode",{parentName:"li"},"NVME"),". In my assumption, those ",(0,i.kt)("inlineCode",{parentName:"li"},"storage devices")," need to be configured in the ",(0,i.kt)("inlineCode",{parentName:"li"},"initramfs"),".")))),(0,i.kt)("h4",{id:"for-usb-storage"},"For ",(0,i.kt)("inlineCode",{parentName:"h4"},"usb storage")),(0,i.kt)("p",null,"This storage device file will be named ",(0,i.kt)("inlineCode",{parentName:"p"},"/dev/sdX"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'qemu-system-aarch64 \\\n    -machine virt \\\n    -cpu cortex-a57 \\\n    -smp 4 \\\n    -m 4G \\\n    -no-reboot \\\n    -nographic \\\n    -kernel $kernel \\\n    -initrd $initrd \\\n    -append "earlyprintk loglevel=8 root=/dev/sda2 rootfstype=ext4 console=ttyAMA0 raid=noautodetect" \\\n    -device usb-ehci \\\n    -device usb-storage,drive=disk0 \\\n    -drive file=$img,format=raw,if=none,id=disk0 \\\n    -device virtio-net-pci,netdev=mynet \\\n    -netdev user,id=mynet,hostfwd=tcp::2222-:22\n')),(0,i.kt)("p",null,"Options in detail:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-device usb-ehci"),": usb bus -> PCI bus"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-device usb-storage"),": usb storage device -> usb bus")),(0,i.kt)("h2",{id:"test-raspberry-pi-vm"},"Test Raspberry Pi VM"),(0,i.kt)("p",null,"Log into the ",(0,i.kt)("strong",{parentName:"p"},"Raspberry Pi")," via ",(0,i.kt)("inlineCode",{parentName:"p"},"ssh")," from the macOS host,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\u276f ssh -p 2222 pi@localhost\nThe authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.\nED25519 key fingerprint is SHA256:6igL6iaigBCszv8m6nyNl+tsB2siV/tL+TRQANC6nBw.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '[localhost]:2222' (ED25519) to the list of known hosts.\npi@localhost's password: \nLinux raspberrypi 6.1.21-v8+ #1642 SMP PREEMPT Mon Apr  3 17:24:16 BST 2023 aarch64\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Fri Sep 22 16:30:58 2023\n\nSSH is enabled and the default password for the 'pi' user has not been changed.\nThis is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.\n\npi@raspberrypi:~ $ \n")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://interrupt.memfault.com/blog/emulating-raspberry-pi-in-qemu"},"Emulating a Raspberry Pi in QEMU | InterruptEmulating a Raspberry Pi in QEMU")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://blogs.oracle.com/linux/post/how-to-emulate-block-devices-with-qemu"},"How to emulate block devices with QEMU")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://u-boot.readthedocs.io/en/latest/board/emulation/blkdev.html"},"Emulation of block devices \u2014 Das U-Boot unknown version documentation")))}u.isMDXComponent=!0}}]);