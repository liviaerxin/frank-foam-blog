"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9527],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),f=a,y=c["".concat(l,".").concat(f)]||c[f]||h[f]||o;return r?n.createElement(y,s(s({ref:t},u),{},{components:r})):n.createElement(y,s({ref:t},u))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},42591:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={authors:["frank"],tags:["Python Celery"],description:"Python Celery",keywords:["Python Celery"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-12-20T00:00:00.000Z"),draft:!1,enableComments:!0},s="Python Celery",i={permalink:"/blog/python-celery-workflow",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/python-celery-workflow.mdx",source:"@site/../../blog/python-celery-workflow.mdx",title:"Python Celery",description:"Python Celery",date:"2023-12-20T00:00:00.000Z",formattedDate:"December 20, 2023",tags:[{label:"Python Celery",permalink:"/blog/tags/python-celery"}],readingTime:.86,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{authors:["frank"],tags:["Python Celery"],description:"Python Celery",keywords:["Python Celery"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-12-20T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Database Migration Using Alembic in Python",permalink:"/blog/python-alembic"},nextItem:{title:"Python C Library",permalink:"/blog/python-c-library"}},l={authorsImageUrls:[void 0]},p=[{value:"Construct a workflow",id:"construct-a-workflow",level:2},{value:"Avoid running synchronous subtasks within a task",id:"avoid-running-synchronous-subtasks-within-a-task",level:2},{value:"Asynchronous tasks with a task",id:"asynchronous-tasks-with-a-task",level:2},{value:"Monitor the workflow",id:"monitor-the-workflow",level:2},{value:"Resources",id:"resources",level:2}],u={toc:p},c="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"What's ",(0,a.kt)("strong",{parentName:"p"},"workflow")," in Celery?"),(0,a.kt)("p",null,"In ",(0,a.kt)("strong",{parentName:"p"},"Celery"),", ",(0,a.kt)("strong",{parentName:"p"},"workflow")," is composed of multiple ",(0,a.kt)("strong",{parentName:"p"},"tasks"),", and a ",(0,a.kt)("strong",{parentName:"p"},"task")," is deemed to be a universal unit of the ",(0,a.kt)("strong",{parentName:"p"},"workflow"),", as a function in the program. In ",(0,a.kt)("strong",{parentName:"p"},"Celery"),", it's recommended to divide a long-running task into multiple short-running tasks. ",(0,a.kt)("strong",{parentName:"p"},"workflow")," comes out to help ease the orchestrations of the work, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"chain()")," three tasks."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/liviaerxin/fastapi-celery-ml/blob/main/app/examples/celery_workflow.py"},"A demo workflow")),(0,a.kt)("h2",{id:"construct-a-workflow"},"Construct a workflow"),(0,a.kt)("h2",{id:"avoid-running-synchronous-subtasks-within-a-task"},"Avoid running synchronous subtasks within a task"),(0,a.kt)("h2",{id:"asynchronous-tasks-with-a-task"},"Asynchronous tasks with a task"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"@app.task(bind=True)\ndef update_page_info(self, url):\n    # fetch_page -> parse_page -> store_page\n    chain = fetch_page.s(url) | parse_page.s() | store_page_info.s(url)\n    # chain()\n    self.replace(chain)\n\n@app.task()\ndef fetch_page(url):\n    return myhttplib.get(url)\n\n@app.task()\ndef parse_page(page):\n    return myparser.parse_document(page)\n\n@app.task(ignore_result=True)\ndef store_page_info(info, url):\n    PageInfo.objects.create(url=url, info=info)\n")),(0,a.kt)("h2",{id:"monitor-the-workflow"},"Monitor the workflow"),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://blog.det.life/replacing-celery-tasks-inside-a-chain-b1328923fb02"},"Designing Dynamic Workflows with Celery and Python | by Marin Agli\u0107 | Data Engineer Things")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dev.to/akarshan/the-curious-case-of-celery-work-flows-39f7"},"The Curious Case of Celery Work-flows")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://engineering.instawork.com/celery-eta-tasks-demystified-424b836e4e94"},"Celery ETA Tasks Demystified. At Instawork, we use Celery to queue\u2026 | by Oleg Pesok | Instawork Engineering")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.celeryq.dev/en/stable/userguide/canvas.html"},"Canvas: Designing Work-flows \u2014 Celery 5.3.6 documentation")))}h.isMDXComponent=!0}}]);