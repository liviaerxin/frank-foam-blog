"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3011],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(r),h=a,d=p["".concat(c,".").concat(h)]||p[h]||m[h]||i;return r?n.createElement(d,s(s({ref:t},u),{},{components:r})):n.createElement(d,s({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},64040:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const i={},s="Tuesday, July 25, 2023",o={permalink:"/journal/2023/07/25/",source:"@site/../../journal/2023-07-25.md",title:"Tuesday, July 25, 2023",description:"- [ ] Authentication and Authorization in Microservices",date:"2023-07-25T00:00:00.000Z",formattedDate:"July 25, 2023",tags:[],readingTime:1.405,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"Wednesday, July 26, 2023",permalink:"/journal/2023/07/26/"},nextItem:{title:"Friday, July 21, 2023",permalink:"/journal/2023/07/21/"}},c={authorsImageUrls:[]},l=[],u={toc:l},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",{className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Authentication and Authorization in Microservices")),(0,a.kt)("p",null,"Authentication in microservices involves two main occasions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"authentication required when end users communicate with services."),(0,a.kt)("li",{parentName:"ol"},"authentication happens between internal services."),(0,a.kt)("li",{parentName:"ol"},"authentication needed when external services enter internal services.")),(0,a.kt)("p",null,"OAuth 2.0 provides the industry-standard protocol for authorizing users in distributed systems. The OAuth framework reduces the burden on developers, eliminating duplications to build their own authentication mechanism in each microservice."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dev.to/behalf/authentication-authorization-in-microservices-architecture-part-i-2cn0"},"Authentication & Authorization in Microservices Architecture - Part I")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://softwareengineering.stackexchange.com/questions/366815/microservice-architecture-using-auth-server-as-a-user-resource-server"},"https://softwareengineering.stackexchange.com/questions/366815/microservice-architecture-using-auth-server-as-a-user-resource-server")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://auth0.com/docs/get-started"},"https://auth0.com/docs/get-started")),(0,a.kt)("ul",{className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","User registration flow in microservice")),(0,a.kt)("ul",{className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Communication between microservices")),(0,a.kt)("p",null,"Share user data between micro services"),(0,a.kt)("p",null,"User service and Comment service"),(0,a.kt)("p",null,"populate user data into Comment service, save user data in comment service, update user data in comment service"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/67543408/microservices-storing-user-data-in-separate-database"},"https://stackoverflow.com/questions/67543408/microservices-storing-user-data-in-separate-database")),(0,a.kt)("p",null,"Ideally, the client communicates with the each service directly, and no interaction between the services!"),(0,a.kt)("p",null,"However, there is the need for communication between these services."),(0,a.kt)("p",null,'For example, o what happens if a user deletes his account? What if you delete a TV show? You probably want to trigger some events that will update the data in your comment microservice. In the long run you want to keep everything "eventually consistent".'),(0,a.kt)("p",null,"The event-driven architecture comes up!"),(0,a.kt)("ul",{className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Data retrieved from two or more services")),(0,a.kt)("p",null,'For example, you send a request from UI saying "give me comments with usernames", '),(0,a.kt)("p",null,"GraphQL interface then first issues a request to comments service, then to user service and finally sends one response with combined data"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: issue a number of requests to various micro-services to collect all the data and return it in only 1 response")),(0,a.kt)("p",null,"Rest needs to send many."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://softwareengineering.stackexchange.com/questions/418153/design-a-correct-microservices-architecture-with-data-relations"},"https://softwareengineering.stackexchange.com/questions/418153/design-a-correct-microservices-architecture-with-data-relations")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.nginx.com/blog/event-driven-data-management-microservices/"},"Event-Driven Data Management for Microservices - NGINX")))}m.isMDXComponent=!0}}]);