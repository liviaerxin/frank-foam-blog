"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7263],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},64826:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={authors:["frank"],tags:["wiki","utf-8","encode"],description:"Wiki UTF8",keywords:["Wiki UTF8"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-12-08T00:00:00.000Z"),draft:!1,enableComments:!0},o="Wiki Unicode",l={permalink:"/blog/wiki-unicode",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/wiki-unicode.mdx",source:"@site/../../blog/wiki-unicode.mdx",title:"Wiki Unicode",description:"Wiki UTF8",date:"2023-12-08T00:00:00.000Z",formattedDate:"December 8, 2023",tags:[{label:"wiki",permalink:"/blog/tags/wiki"},{label:"utf-8",permalink:"/blog/tags/utf-8"},{label:"encode",permalink:"/blog/tags/encode"}],readingTime:3.91,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{authors:["frank"],tags:["wiki","utf-8","encode"],description:"Wiki UTF8",keywords:["Wiki UTF8"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-12-08T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Wiki Cryptography",permalink:"/blog/wiki-cryptography"},nextItem:{title:"Wiki Development Environment",permalink:"/blog/wiki-dev-environment"}},s={authorsImageUrls:[void 0]},c=[{value:"FAQ",id:"faq",level:2},{value:"How a character is displayed on the screen?",id:"how-a-character-is-displayed-on-the-screen",level:3},{value:"How to find out whether the file uses UTF-8 or ASCII or other encoding schemas?",id:"how-to-find-out-whether-the-file-uses-utf-8-or-ascii-or-other-encoding-schemas",level:3},{value:"Can I set UTF-16 as locale in Linux?",id:"can-i-set-utf-16-as-locale-in-linux",level:3},{value:"What happens when printing a UTF-16 file in Linux?",id:"what-happens-when-printing-a-utf-16-file-in-linux",level:3},{value:"How can I check a UTF-8 file has a <code>BOM</code>?",id:"how-can-i-check-a-utf-8-file-has-a-bom",level:3},{value:"Why we can copy and paste the unicode characters into a shell?",id:"why-we-can-copy-and-paste-the-unicode-characters-into-a-shell",level:3},{value:"How a string is stored in memory when Python running?",id:"how-a-string-is-stored-in-memory-when-python-running",level:3},{value:"Unicode in JSON",id:"unicode-in-json",level:2},{value:"Base64",id:"base64",level:2},{value:"Python",id:"python",level:2},{value:"Resources",id:"resources",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The smallest unit of all texts we see on the screen is one character. But you may wonder about:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"How one character is displayed on the screen?"),(0,r.kt)("li",{parentName:"ol"},"How one character is kept in memory or disk in binary format(0 or 1)?")),(0,r.kt)("p",null,"Let's dive into the ",(0,r.kt)("strong",{parentName:"p"},"Unicode")," to solve these questions."),(0,r.kt)("p",null,"In Unicode, a character maps to something called code point which is a magic number written as hex like: ",(0,r.kt)("inlineCode",{parentName:"p"},"U+20AC")," and is still just a abstract layer."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Layer"),(0,r.kt)("th",{parentName:"tr",align:null},"Representation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"screen"),(0,r.kt)("td",{parentName:"tr",align:null},"glyph")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"abstraction"),(0,r.kt)("td",{parentName:"tr",align:null},"unicode character")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"abstraction"),(0,r.kt)("td",{parentName:"tr",align:null},"unicode code point")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disk"),(0,r.kt)("td",{parentName:"tr",align:null},"variable-length bytes(1 to 4 bytes)")))),(0,r.kt)("p",null,"How that code point is represented in memory or on disk?"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UTF-8"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UTF-16"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"UTF-32")," help translate unicode code point into binary data in 8-bit bytes which can be saved in disk or be transported in network."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UTF-8")," is character-to-bytes(1 to 4 bytes) encoding standard across almost all system and application."),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-a-character-is-displayed-on-the-screen"},"How a character is displayed on the screen?"),(0,r.kt)("p",null,"software maps each character to its glyph(a grid of pixels), draw these pixels onto the screen."),(0,r.kt)("h3",{id:"how-to-find-out-whether-the-file-uses-utf-8-or-ascii-or-other-encoding-schemas"},"How to find out whether the file uses UTF-8 or ASCII or other encoding schemas?"),(0,r.kt)("p",null,"It's not always foolproof because there is no universal mandate or requirement that all files must specify their encoding. But it's a good practice to add BOM(Byte Order Mark) at the beginning of a UTF-8 encoded file."),(0,r.kt)("h3",{id:"can-i-set-utf-16-as-locale-in-linux"},"Can I set UTF-16 as locale in Linux?"),(0,r.kt)("p",null,"No, you cannot. Linux use ",(0,r.kt)("inlineCode",{parentName:"p"},"UTF-8")," encoding which is compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"ASCII"),"."),(0,r.kt)("h3",{id:"what-happens-when-printing-a-utf-16-file-in-linux"},"What happens when printing a UTF-16 file in Linux?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# >>> '\u20ac'.encode(\"utf16\") -> b'\\xff\\xfe\\xac '\n$ echo -n -e \\\\xff\\\\xfe\\\\xac\\\\x20 > a.txt\n$ hexdump -C a.txt\n00000000  ff fe ac 20                                       |... |\n00000004\n$ file a.txt\na.txt: Unicode text, UTF-16, little-endian text, with no line terminators\n$ cat a.txt\n\ufffd\ufffd\ufffd\n$ iconv -f UTF-16LE -t UTF-8 a.txt\n\u20ac\n")),(0,r.kt)("h3",{id:"how-can-i-check-a-utf-8-file-has-a-bom"},"How can I check a UTF-8 file has a ",(0,r.kt)("inlineCode",{parentName:"h3"},"BOM"),"?"),(0,r.kt)("p",null,"Create a file without ",(0,r.kt)("inlineCode",{parentName:"p"},"BOM"),","),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},">>> f.flush()\n>>> b'\\xe2\\x82\\xac'.decode()\n'\u20ac'\n>>> '\u20ac'.encode()\nb'\\xe2\\x82\\xac'\n>>> bom=b\"\\xef\\xbb\\xbf\"\n>>> f=open(\"a.txt\", \"wb+\")\n>>> f.write(b'\\xe2\\x82\\xac')\n3\n>>> f.flush()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ file a.txt\na.txt: Unicode text, UTF-8 text, with no line terminators\n")),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"BOM")," adhere file,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},">>> f.seek(0)\n0\n>>> f.truncate(0)\n0\n>>> f.write(b'\\xef\\xbb\\xbf\\xe2\\x82\\xac')\n6\n>>> f.flush()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ file a.txt\na.txt: Unicode text, UTF-8 (with BOM) text, with no line terminators\n$ hexdump -C a.txt\n00000000  ef bb bf e2 82 ac                                 |......|\n00000006\n")),(0,r.kt)("h3",{id:"why-we-can-copy-and-paste-the-unicode-characters-into-a-shell"},"Why we can copy and paste the unicode characters into a shell?"),(0,r.kt)("p",null,"When we do copying on the screen, we're copying the character's binary data which is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"os")," memory not the code point inside memory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# b'\\xe2\\x82\\xac'.decode() -> '\u20ac'\n$ echo -e \\\\xe2\\\\x82\\\\xac | xclip -selection clipboard\n")),(0,r.kt)("p",null,"Then you can use your mouse right click to copy to the shell and you will see ",(0,r.kt)("inlineCode",{parentName:"p"},"\u20ac"),"."),(0,r.kt)("h3",{id:"how-a-string-is-stored-in-memory-when-python-running"},"How a string is stored in memory when Python running?"),(0,r.kt)("h2",{id:"unicode-in-json"},"Unicode in JSON"),(0,r.kt)("p",null,"JSON(natively a text format) support the unicode character to be escaped or not. When ",(0,r.kt)("strong",{parentName:"p"},"being escaped"),", the character will be replaced with the unicode code point, then which will be represented in 6 or 8 ascii characters occupying 6 or 8 bytes. When ",(0,r.kt)("strong",{parentName:"p"},"not being escaped"),", the character will be represented as just one unicode character as itself occupying 1 to 4 bytes if using UTF-8."),(0,r.kt)("p",null,"Escaping will cost more storage but will be compatible in ASCII-only environments, as escaping force all characters to be ASCII characters."),(0,r.kt)("p",null,"Case 1: Characters escaped,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'>>> import json\n>>> b=b\'{"text": "\\u4f60\\u597d"}\'\n>>> json.loads(b)\n{\'text\': \'\u4f60\u597d\'}jsn\n>>> json.dumps(json.loads(b))\n\'{"text": "\\\\u4f60\\\\u597d"}\'\n>>> json.dumps(json.loads(b), ensure_ascii=False)\n\'{"text": "\u4f60\u597d"}\'\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'>>> f=open("a.txt", "w+")\n>>> f.write(json.dumps(json.loads(b)))\n24\n>>> f.flush()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'$ cat a.txt\n{"text": "\\u4f60\\u597d"}#\n$  hexdump -C a.txt\n00000000  7b 22 74 65 78 74 22 3a  20 22 5c 75 34 66 36 30  |{"text": "\\u4f60|\n00000010  5c 75 35 39 37 64 22 7d                           |\\u597d"}|\n00000018\n')),(0,r.kt)("p",null,"Case 2: Characters not escaped,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},">>> f.seek(0)\n0\n>>> f.truncate(0)\n0\n>>> f.write(json.dumps(json.loads(b), ensure_ascii=False))\n14\n>>> f.flush()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'$ cat a.txt\n{"text": "\u4f60\u597d"}#\n$ hexdump -C a.txt\n00000000  7b 22 74 65 78 74 22 3a  20 22 e4 bd a0 e5 a5 bd  |{"text": "......|\n00000010  22 7d                                             |"}|\n00000012\n')),(0,r.kt)("h2",{id:"base64"},"Base64"),(0,r.kt)("p",null,"Base64 is binary-to-text encoding schema which make bytes data to be represented in ASCII characters to be human readable."),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"},"The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) \u2013 Joel on Software")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://nedbatchelder.com/text/unipain.html"},"Pragmatic Unicode | Ned Batchelder")))}d.isMDXComponent=!0}}]);