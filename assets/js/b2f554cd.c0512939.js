"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{4556:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/build-system-c++","metadata":{"permalink":"/blog/build-system-c++","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/build-system-c++.md","source":"@site/../../blog/build-system-c++.md","title":"Build System C/C++","description":"","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[{"label":"Make","permalink":"/blog/tags/make"},{"label":"Ninja","permalink":"/blog/tags/ninja"},{"label":"MSBuild","permalink":"/blog/tags/ms-build"},{"label":"CMake","permalink":"/blog/tags/c-make"},{"label":"Meson","permalink":"/blog/tags/meson"}],"readingTime":0.68,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Build System C/C++","description":"","created":"2023-05-22T00:00:00.000Z","tags":["Make","Ninja","MSBuild","CMake","Meson"]},"nextItem":{"title":"Data Center","permalink":"/blog/data-center"}},"content":"[List of build automation software - Wikipedia](https://en.wikipedia.org/wiki/List_of_build_automation_software)\\n\\n```plantuml\\n@startuml\\nskinparam nodesep 50\\nskinparam ranksep 100\\n\\n!include <material/common>\\n!include <material/code_braces>\\n!include <material/code_array>\\n!include <material/code_brackets>\\n!include <material/code_parentheses>\\n!include <material/code_tags>\\n\\ntogether {\\nfolder \\"Project\\" as source <<Source Code>> {\\n    file sourcefile[\\n        *.cpp\\n        *.c\\n        *.h\\n        <$ma_code_braces>\\n    ]\\n}\\n\\ncomponent \\"CMake\\" as cmake {\\n    file cmakefiles[\\n        CMakefiles.txt\\n        <$ma_code_braces>\\n    ]\\n}\\n}\\n\\ncomponent \\"Make\\" as make {\\n    file makefile[\\n        Makefile\\n        <$ma_code_braces>\\n    ]\\n}\\n\\ncomponent \\"MSBuild\\" as msbuild {\\n    file msbuildfile[\\n        .vcproj\\n        <$ma_code_braces>\\n    ]\\n}\\n\\npackage \\"Windows Application\\" as wa <<.exe>> <<*.DLL>> {\\n}\\n\\npackage \\"Unix Application\\" as ua <<.>> <<*.so>> {\\n}\\n\\n\\n\\ncmake --\x3e make: Generator: Make\\ncmake --\x3e msbuild : Generator: Visual Studio 2022\\n\\nsource --\x3e wa\\nmsbuild --\x3e wa\\n\\nsource --\x3e ua\\nmake --\x3e ua\\n```\\n\\n## Build System\\n\\nMake\\n\\nNinja\\n\\nMSBuild\\n\\n## Build System Generator\\n\\nCMake\\n\\nMeson\\n\\n## CI"},{"id":"/data-center","metadata":{"permalink":"/blog/data-center","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/data-center.md","source":"@site/../../blog/data-center.md","title":"Data Center","description":"Economic Data","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[],"readingTime":0.045,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Build System C/C++","permalink":"/blog/build-system-c++"},"nextItem":{"title":"Graphical User Interface(GUI)","permalink":"/blog/graphical-user-interface"}},"content":"## Economic Data\\n\\n[FRED ECONOMIC DATA](https://fred.stlouisfed.org/)\\n\\n[US inflation cpi](https://tradingeconomics.com/united-states/inflation-cpi)"},{"id":"/graphical-user-interface","metadata":{"permalink":"/blog/graphical-user-interface","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/graphical-user-interface.md","source":"@site/../../blog/graphical-user-interface.md","title":"Graphical User Interface(GUI)","description":"Modern GUI composition of:","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[],"readingTime":1.155,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Data Center","permalink":"/blog/data-center"},"nextItem":{"title":"OpenCV tips","permalink":"/blog/opencv-tips"}},"content":"Modern GUI composition of:\\n\\n- Windowing System/Compositor\\n  - Quartz Compositor(OSX)\\n  - Desktop Window Manager(Windows)\\n  - X11(Linux)\\n  - Wayland(Linux)\\n  - SurfaceFlinger(Android)\\n- Graphic Rendering\\n  - Hardware-Accelerated Rendering\\n    - OpenGL\\n    - Vulkan\\n    - DirectX\\n  - Software Rendering\\n    - QT Rasterization Engine\\n\\nWindowing System\\n\\nIt\'s very essential to apply the `native Windowing System` library for Cross-platform GUI framework in different platforms. Here\'s a cue from [including native windowing system headers from GLFW](https://github.com/glfw/glfw/blob/3a60992a418aad88717db32353bec22e8bb7dab3/include/GLFW/glfw3native.h#L94-L118)\\n\\n```c\\n#if !defined(GLFW_NATIVE_INCLUDE_NONE)\\n #if defined(GLFW_EXPOSE_NATIVE_WIN32) || defined(GLFW_EXPOSE_NATIVE_WGL)\\n  /* This is a workaround for the fact that glfw3.h needs to export APIENTRY (for\\n   * example to allow applications to correctly declare a GL_KHR_debug callback)\\n   * but windows.h assumes no one will define APIENTRY before it does\\n   */\\n  #if defined(GLFW_APIENTRY_DEFINED)\\n   #undef APIENTRY\\n   #undef GLFW_APIENTRY_DEFINED\\n  #endif\\n  #include <windows.h>\\n #elif defined(GLFW_EXPOSE_NATIVE_COCOA) || defined(GLFW_EXPOSE_NATIVE_NSGL)\\n  #if defined(__OBJC__)\\n   #import <Cocoa/Cocoa.h>\\n  #else\\n   #include <ApplicationServices/ApplicationServices.h>\\n   #include <objc/objc.h>\\n  #endif\\n #elif defined(GLFW_EXPOSE_NATIVE_X11) || defined(GLFW_EXPOSE_NATIVE_GLX)\\n  #include <X11/Xlib.h>\\n  #include <X11/extensions/Xrandr.h>\\n #elif defined(GLFW_EXPOSE_NATIVE_WAYLAND)\\n  #include <wayland-client.h>\\n #endif\\n```\\n\\n[Windowing system - Wikipedia](https://en.wikipedia.org/wiki/Windowing_system)\\n\\n[GUI Under Linux | Baeldung on Linux](https://www.baeldung.com/linux/gui)\\n\\n[GTK - Wikipedia](https://en.wikipedia.org/wiki/GTK)\\n\\nGraphic Render APIs/Libraries\\n\\n[A Comparison of Modern Graphics APIs](https://alain.xyz/blog/comparison-of-modern-graphics-apis)\\n\\n## Android graphics\\n\\ntwo core pieces:\\n\\n- SurfaceFlinger\\n- Skia\\n\\n[Graphics \xa0|\xa0 Android Open Source Project](https://source.android.com/devices/graphics)\\n[Android Graphics Internals - Stack Overflow](https://stackoverflow.com/questions/4579573/android-graphics-internals)\\n\\n## WayLand\\n\\n[What is Wayland? \xb7 Writing Wayland clients](https://bugaevc.gitbooks.io/writing-wayland-clients/content/about-this-book/what-is-wayland.html)\\n\\n[The Hello Wayland Tutorial | FLOSS & Cia](https://hdante.wordpress.com/2014/07/08/the-hello-wayland-tutorial/)\\n\\n[How to use Wayland with C to make a Linux app | by Sergey Bugaev | Medium](https://medium.com/@bugaevc/how-to-use-wayland-with-c-to-make-a-linux-app-c2673a35ce05)"},{"id":"/opencv-tips","metadata":{"permalink":"/blog/opencv-tips","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/opencv-tips.md","source":"@site/../../blog/opencv-tips.md","title":"OpenCV tips","description":"Q: Whether the image/frame from VideoCapture is in BGR or YUV pixels format?","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[],"readingTime":0.19,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Graphical User Interface(GUI)","permalink":"/blog/graphical-user-interface"},"nextItem":{"title":"Python Module","permalink":"/blog/py-module"}},"content":"Q: Whether the image/frame from VideoCapture is in `BGR` or `YUV` pixels format?\\nA:\\nVideoCapture will convert the image automatically to BGR colorspace.\\nyou can disable this conversion (and receive YUV) by setting the CAP_PROP_CONVERT_RGB property to false."},{"id":"/py-module","metadata":{"permalink":"/blog/py-module","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/py-module.md","source":"@site/../../blog/py-module.md","title":"Python Module","description":"Python Module Search Path","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[],"readingTime":0.075,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"OpenCV tips","permalink":"/blog/opencv-tips"},"nextItem":{"title":"Python Benchmark","permalink":"/blog/python-benchmark"}},"content":"## Python Module Search Path\\n\\n[The Module Search Path](https://docs.python.org/3/tutorial/modules.html#the-module-search-path)\\n\\n[Introduction to Python module search path](https://www.pythontutorial.net/python-basics/python-module-search-path/)"},{"id":"/python-benchmark","metadata":{"permalink":"/blog/python-benchmark","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/python-benchmark.md","source":"@site/../../blog/python-benchmark.md","title":"Python Benchmark","description":"Ok, here is the cost of acquiring and releasing an uncontended lock","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[],"readingTime":1.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Python Module","permalink":"/blog/py-module"},"nextItem":{"title":"Serialization","permalink":"/blog/serialization"}},"content":"Ok, here is the cost of acquiring and releasing an uncontended lock\\nunder Linux, with Python 3.2:\\n\\n```sh\\n$ ./python -m timeit \\\\\\n  -s \\"from threading import Lock; l=Lock(); a=l.acquire; r=l.release\\" \\\\\\n  \\"a(); r()\\"\\n10000000 loops, best of 3: 0.127 usec per loop\\n```\\n\\nAnd here is the cost of calling a dummy Python function:\\n\\n```sh\\n$ ./python -m timeit -s \\"def a(): pass\\" \\"a(); a()\\"\\n1000000 loops, best of 3: 0.221 usec per loop\\n```\\n\\nAnd here is the cost of calling a trivial C function (which returns the\\nFalse singleton):\\n\\n```sh\\n$ ./python -m timeit -s \\"a=bool\\" \\"a(); a()\\"\\n10000000 loops, best of 3: 0.164 usec per loop\\n```\\n\\nAlso, note that using the lock as a context manager is actually slower,\\nnot faster as you might imagine:\\n\\n```sh\\n$ ./python -m timeit -s \\"from threading import Lock; l=Lock()\\" \\\\\\n  \\"with l: pass\\"\\n1000000 loops, best of 3: 0.242 usec per loop\\n```\\n\\nAt least under Linux, there doesn\'t seem to be a lot of room for\\nimprovement in lock performance, to say the least.\\n\\nPS: RLock is now as fast as Lock:\\n\\n```sh\\n$ ./python -m timeit \\\\\\n-s \\"from threading import RLock; l=RLock(); a=l.acquire; r=l.release\\" \\\\\\n\\"a(); r()\\"\\n10000000 loops, best of 3: 0.114 usec per loop\\n```"},{"id":"/serialization","metadata":{"permalink":"/blog/serialization","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/serialization.md","source":"@site/../../blog/serialization.md","title":"Serialization","description":"Serialization","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[],"readingTime":0.49,"hasTruncateMarker":false,"authors":[],"frontMatter":{"type":"data-structure","keywords":["MessagePack","msgpack","json","serialization","Protocol Buffers","Protobuf"],"tag":["msgpack","data structure"]},"prevItem":{"title":"Python Benchmark","permalink":"/blog/python-benchmark"},"nextItem":{"title":"Todo","permalink":"/blog/todo"}},"content":"[Serialization](https://en.wikipedia.org/wiki/Serialization)\\n\\n[The need for speed \u2014 Experimenting with message serialization](https://medium.com/@hugovs/the-need-for-speed-experimenting-with-message-serialization-93d7562b16e4)\\n\\n[MessagePack, Json, Protobuf](https://github.com/neuecc/MessagePack-CSharp/issues/819#issuecomment-586125191)\\n\\nIn computing, `serialization` is the process of translating a data structure or object into a format that can be stored(for example, in a file or memory buffer) or transmitted(for example, over a computer network) and reconstructed later (possibly in a different computer environment).\\n\\n## Json\\n\\n## MessagePack\\n\\n[msgpack GitHub](https://github.com/msgpack/msgpack)\\n\\n## Protocol Buffers\\n\\n[Protocol Buffers](https://developers.google.com/protocol-buffers)\\n\\n## Supported Features\\n\\n| Protocol    | Discriminator Property & Polymorphism |\\n| ----------- | :-----------------------------------: |\\n| Json        |                   \u2714\ufe0f                   |\\n| MessagePack |                   \u2714\ufe0f                   |\\n| Protobuf    |                   \u2716\ufe0f                   |"},{"id":"/todo","metadata":{"permalink":"/blog/todo","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/todo.md","source":"@site/../../blog/todo.md","title":"Todo","description":"You can create todos in Foam.","date":"2023-06-06T16:46:00.000Z","formattedDate":"June 6, 2023","tags":[],"readingTime":0.58,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Serialization","permalink":"/blog/serialization"},"nextItem":{"title":"Debug Shared Library","permalink":"/blog/shared-library-debug"}},"content":"You can create todos in Foam.\\n\\n- [] Host this wiki project with Jekyll and GitHub Pages. [[inbox#Build Personal Wiki Work Station]]\\n  - [] use minimal theme\\n  - [] apply navigation bar\\n  - [] set up search bar\\n- [] Improve routing table understanding. [[network-diagnosis#Network Diagnosis]]\\n- [] Test serialization/de-serialization performance for json, msgpack and protobuf.\\n- [] Try Homebridge on Jetson nano.\\n- [] Research on Wayland. [[graphical-user-interface#WayLand]]\\n- [] Learn GLFW\\n  - [A simple OpenGL animation with glfw, ste - C++ Articles](https://cplusplus.com/articles/NvCRko23/)\\n  - [The case of OpenGL, in C++, on m1 mac - Antonin Carette](https://carette.xyz/posts/opengl_and_cpp_on_m1_mac/)\\n  - [GitHub - datenwolf/linmath.h: a lean linear math library, aimed at graphics programming. Supports vec3, vec4, mat4x4 and quaternions](https://github.com/datenwolf/linmath.h)"},{"id":"/shared-library-debug","metadata":{"permalink":"/blog/shared-library-debug","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/shared-library-debug.md","source":"@site/../../blog/shared-library-debug.md","title":"Debug Shared Library","description":"Test Dynamic Library","date":"2023-06-02T00:00:00.000Z","formattedDate":"June 2, 2023","tags":[{"label":"debug","permalink":"/blog/tags/debug"},{"label":"shared library","permalink":"/blog/tags/shared-library"},{"label":"osx","permalink":"/blog/tags/osx"},{"label":"linux","permalink":"/blog/tags/linux"}],"readingTime":1.49,"hasTruncateMarker":false,"authors":[{"name":"Frank Chen","title":"Maintainer of Docusaurus","url":"https://github.com/liviaerxin","imageURL":"https://github.com/liviaerxin.png","key":"frank"}],"frontMatter":{"foam_template":{"name":"Blog Docusaurus Template","description":"Creates Docusaurus blog/slip","filepath":"blog/test-dynamic-library.md"},"authors":["frank"],"description":"Test Dynamic Library","keywords":["debug","dynamic library","shared library"],"image":"https://i.imgur.com/mErPwqL.png","tags":["debug","shared library","osx","linux"],"date":"2023-06-02T00:00:00.000Z","draft":false},"prevItem":{"title":"Todo","permalink":"/blog/todo"},"nextItem":{"title":"Welcome Docusaurus v2","permalink":"/blog/welcome-docusaurus-v2"}},"content":"Concepts:\\n\\n- Show shared libraries dependencies(detect what shared libraries an executable or a another shared libraries depend on)\\n- Check/Test dependent shared libraries loaded successfully\\n\\n## Using `ldd` Command\\n\\nAvailable in Linux:\\n\\n```sh\\nldd /usr/bin/vim\\n\\tlinux-vdso.so.1 (0x00007ffc75fb1000)\\n\\tlibgtk-3.so.0 => /usr/lib/libgtk-3.so.0 (0x00007fa4dcb5e000)\\n\\tlibgdk-3.so.0 => /usr/lib/libgdk-3.so.0 (0x00007fa4dca64000)\\t\\n\\tlibXau.so.6 => /usr/lib/libXau.so.6 (0x00007fa4db7a9000)\\n        ....\\n\\tliblzma.so.5 => /usr/lib/liblzma.so.5 (0x00007fa4db63f000)\\n\\tliblz4.so.1 => /usr/lib/liblz4.so.1 (0x00007fa4db61d000)\\n\\tlibgcrypt.so.20 => /usr/lib/libgcrypt.so.20 (0x00007fa4db4ff000)\\n\\tlibgpg-error.so.0 => /usr/lib/libgpg-error.so.0 (0x00007fa4db4d8000)\\n```\\n\\n## Using `objdump` Command\\n\\nAvailable in Linux:\\n\\n```sh\\nobjdump -p /usr/bin/vim | grep \'NEEDED\'\\n  NEEDED               libpython3.7m.so.1.0\\n  NEEDED               libcrypt.so.2\\n  NEEDED               libpthread.so.0\\n  NEEDED               libdl.so.2\\n  NEEDED               libutil.so.1\\n  NEEDED               libm.so.6\\n  NEEDED               libselinux.so.1\\n  NEEDED               libtinfo.so.6\\n  NEEDED               libacl.so.1\\n  NEEDED               libgpm.so.2\\n  NEEDED               libc.so.6\\n```\\n\\n## Using `readelf` Command\\n\\nAvailable in Linux:\\n\\n```sh\\nreadelf --dynamic /usr/bin/vim | grep NEEDED\\n 0x0000000000000001 (NEEDED)             Shared library: [libpython3.7m.so.1.0]\\n 0x0000000000000001 (NEEDED)             Shared library: [libcrypt.so.2]\\n 0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]\\n 0x0000000000000001 (NEEDED)             Shared library: [libdl.so.2]\\n 0x0000000000000001 (NEEDED)             Shared library: [libutil.so.1]\\n 0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]\\n 0x0000000000000001 (NEEDED)             Shared library: [libselinux.so.1]\\n 0x0000000000000001 (NEEDED)             Shared library: [libtinfo.so.6]\\n 0x0000000000000001 (NEEDED)             Shared library: [libacl.so.1]\\n 0x0000000000000001 (NEEDED)             Shared library: [libgpm.so.2]\\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\\n```\\n\\n## Using `otool` Command\\n\\nAvailable in OSX:\\n\\n```sh\\notool -L libOpenCvSharpExtern.dylib\\n```\\n\\n## Reading the `/proc/<pid>/maps` File\\n\\nAvailable in Linux:\\n\\n```sh\\ncat /proc/179015/maps \\n...\\n7f2cb67c3000-7f2cb67c6000 r--p 00000000 08:13 3810274                    /usr/lib/libnss_files-2.31.so\\n7f2cb67c6000-7f2cb67cd000 r-xp 00003000 08:13 3810274                    /usr/lib/libnss_files-2.31.so\\n..\\n7f2cb6a89000-7f2cb6a8a000 r--p 00002000 08:13 3810903                    /usr/lib/libutil-2.31.so\\n7f2cb6a8a000-7f2cb6a8b000 r--p 00002000 08:13 3810903                    /usr/lib/libutil-2.31.so\\n...\\n7f2cb9802000-7f2cb9803000 rw-p 00000000 00:00 0 \\n7ffe77658000-7ffe7767a000 rw-p 00000000 00:00 0                          [stack]\\n7ffe776c8000-7ffe776cc000 r--p 00000000 00:00 0                          [vvar]\\n7ffe776cc000-7ffe776ce000 r-xp 00000000 00:00 0                          [vdso]\\nffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]\\n```\\n\\n```sh\\nawk \'$NF!~/\\\\.so/{next} {$0=$NF} !a[$0]++\' /proc/179015/maps\\n...\\n/usr/lib/libpython3.8.so.1.0\\n/usr/lib/libgpg-error.so.0.29.0\\n/usr/lib/libgcrypt.so.20.2.5\\n/usr/lib/liblz4.so.1.9.2\\n/usr/lib/liblzma.so.5.2.5\\n/usr/lib/libsystemd.so.0.28.0\\n/usr/lib/libogg.so.0.8.4\\n/usr/lib/libvorbis.so.0.4.8\\n/usr/lib/libblkid.so.1.1.0\\n/usr/lib/libXdmcp.so.6.0.0\\n/usr/lib/libXau.so.6.0.0\\n/usr/lib/libdatrie.so.1.3.5\\n...\\n```\\n\\n## Using `vmmap` Command\\n\\n## Using `ctypes` in Python\\n\\n```py\\nimport ctypes\\nctypes.cdll.LoadLibrary(\\"libOpenCvSharpExtern.so\\")\\nctypes.CDLL(\\"libOpenCvSharpExtern.so\\")\\n```\\n\\n```c\\ndlopen()\\n```\\n\\n```sh\\nobjdump -p /usr/local/lib/libOpenCvSharpExtern.so\\n```"},{"id":"welcome-docusaurus-v2","metadata":{"permalink":"/blog/welcome-docusaurus-v2","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/2019-09-05-hello-docusaurus-v2.md","source":"@site/../../blog/2019-09-05-hello-docusaurus-v2.md","title":"Welcome Docusaurus v2","description":"This is my first post on Docusaurus 2.","date":"2023-05-30T00:00:00.000Z","formattedDate":"May 30, 2023","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus-v2","permalink":"/blog/tags/docusaurus-v-2"}],"hasTruncateMarker":true,"authors":[{"name":"Frank Chen","title":"Maintainer of Docusaurus","url":"https://github.com/liviaerxin","imageURL":"https://github.com/liviaerxin.png","key":"frank"}],"frontMatter":{"title":"Welcome Docusaurus v2","description":"This is my first post on Docusaurus 2.","slug":"welcome-docusaurus-v2","authors":"frank","tags":["hello","docusaurus-v2"],"image":"https://i.imgur.com/mErPwqL.pngs","hide_table_of_contents":false,"hide_reading_time":true,"date":"2023-05-30T00:00:00.000Z"},"prevItem":{"title":"Debug Shared Library","permalink":"/blog/shared-library-debug"}},"content":"Welcome to this blog. This blog is created with [**Docusaurus 2**](https://docusaurus.io/).\\n\\n\x3c!--truncate--\x3e\\n\\nThis is my first post on Docusaurus 2.\\n\\nA whole bunch of exploration to follow."}]}')}}]);