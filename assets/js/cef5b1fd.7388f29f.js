"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9955],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(h,l(l({ref:t},c),{},{components:r})):n.createElement(h,l({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},77595:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/fastapi-celery-serving-ml-model.md"},authors:["frank"],tags:["fastapi","celery","machine learning"],description:"FastAPI Celery Serving ML Model",keywords:["FastAPI Celery Serving ML Model"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-08-09T00:00:00.000Z"),draft:!1,enableComments:!0},l="FastAPI Celery Serving ML Model",i={permalink:"/blog/fastapi-celery-serving-ml-model",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/fastapi-celery-serving-ml-model.md",source:"@site/../../blog/fastapi-celery-serving-ml-model.md",title:"FastAPI Celery Serving ML Model",description:"FastAPI Celery Serving ML Model",date:"2023-08-09T00:00:00.000Z",formattedDate:"August 9, 2023",tags:[{label:"fastapi",permalink:"/blog/tags/fastapi"},{label:"celery",permalink:"/blog/tags/celery"},{label:"machine learning",permalink:"/blog/tags/machine-learning"}],readingTime:2.095,hasTruncateMarker:!1,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/fastapi-celery-serving-ml-model.md"},authors:["frank"],tags:["fastapi","celery","machine learning"],description:"FastAPI Celery Serving ML Model",keywords:["FastAPI Celery Serving ML Model"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-08-09T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"WPF",permalink:"/blog/wpf"},nextItem:{title:"Git Best Practices",permalink:"/blog/git-best-practices"}},s={authorsImageUrls:[void 0]},p=[{value:"Celery Worker",id:"celery-worker",level:2},{value:"Option --pool=prefork",id:"option---poolprefork",level:3},{value:"Option --pool=eventlet or --pool=gevent",id:"option---pooleventlet-or---poolgevent",level:3},{value:"Option --pool=solo",id:"option---poolsolo",level:3},{value:"Known Issues",id:"known-issues",level:2},{value:"References",id:"references",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"celery-worker"},"Celery Worker"),(0,o.kt)("p",null,"Celery Worker Mechanism:"),(0,o.kt)("p",null,"To start a Celery worker will start a main process that will spawn child processes or threads(based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"--pool")," option): the main process will handle receiving task/sending task result the and these child processes/threads(a.k.a ",(0,o.kt)("inlineCode",{parentName:"p"},"execution pool"),") execute the actual tasks."),(0,o.kt)("p",null,"To increase the number of child processes/threads(via ",(0,o.kt)("inlineCode",{parentName:"p"},"--concurrency")," option) will increase the number of tasks the Celery worker can process in parallel. More processes are usually better."),(0,o.kt)("p",null,"However, in reality, there are often situations:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Run N workers with M pool processes each."),(0,o.kt)("li",{parentName:"ol"},"Run 1 worker with N*M pool processes.")),(0,o.kt)("p",null,"Whether to use ",(0,o.kt)("inlineCode",{parentName:"p"},"processes")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"threads")," depends on what your tasks will actually do and whether they are GPU bound or IO bound."),(0,o.kt)("h3",{id:"option---poolprefork"},"Option --pool=prefork"),(0,o.kt)("p",null,"It spawns multiple processes."),(0,o.kt)("p",null,"When start a Celery worker via ",(0,o.kt)("inlineCode",{parentName:"p"},"celery -A tasks worker --loglevel INFO --concurrency 3 --pool=prefork"),", what will happen underneath?"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Celery start a main process."),(0,o.kt)("li",{parentName:"ol"},"The main process will then spawn 3 child processes. The default ",(0,o.kt)("inlineCode",{parentName:"li"},"concurrency")," is based on the number of ",(0,o.kt)("inlineCode",{parentName:"li"},"CPU")," available on the machine. The default ",(0,o.kt)("inlineCode",{parentName:"li"},"pool")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"prefork")," which uses ",(0,o.kt)("inlineCode",{parentName:"li"},"multiprocessing")," library from Python."),(0,o.kt)("li",{parentName:"ol"},"These child processes will execute the tasks assigned from the main process.")),(0,o.kt)("h3",{id:"option---pooleventlet-or---poolgevent"},"Option --pool=eventlet or --pool=gevent"),(0,o.kt)("p",null,"It creates multiple threads."),(0,o.kt)("p",null,"When start a Celery worker via ",(0,o.kt)("inlineCode",{parentName:"p"},"celery -A tasks worker --loglevel INFO --concurrency 3 --pool=eventlet")),(0,o.kt)("h3",{id:"option---poolsolo"},"Option --pool=solo"),(0,o.kt)("p",null,"It will not create any child process or thread to run task. The tasks will be executed in main process, which causes the main process to be blocked."),(0,o.kt)("p",null,"It seems as: Run 1 worker with 1 process, however ",(0,o.kt)("inlineCode",{parentName:"p"},"--concurrency")," will not take any effect when ",(0,o.kt)("inlineCode",{parentName:"p"},"--pool=solo"),"!"),(0,o.kt)("p",null,"When coming to a microservices environment, this option becomes useful and practical especially running CPU intensive tasks. The container manager such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Docker")," can increase the task processing capabilities through managing the number of worker containers instead of managing the number of pool processes per worker."),(0,o.kt)("p",null,"When start a Celery worker via ",(0,o.kt)("inlineCode",{parentName:"p"},"celery -A tasks worker --loglevel INFO --pool=solo")),(0,o.kt)("h2",{id:"known-issues"},"Known Issues"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/celery/celery/issues/2146"},"Result state is always PENDING in windows")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"FIX: use ",(0,o.kt)("inlineCode",{parentName:"p"},"--pool=solo")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"--pool=prefork")," in default. ",(0,o.kt)("inlineCode",{parentName:"p"},"multiprocessing")," may cause this problem as its some defect in windows!")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://distributedpython.com/posts/celery-execution-pools-what-is-it-all-about/"},"Celery Execution Pools: What is it all about?")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://distributedpython.com/posts/celery-pool-types-part-1-the-worker-and-the-pool/"},"Celery Exececution Pool: The worker and the pool - separation of concerns")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/deploying-ml-models-in-production-with-fastapi-and-celery-7063e539a5db"},"Serving ML Models in Production with FastAPI and Celery | by Jonathan Readshaw | Towards Data Science")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/liviaerxin/FastAPISpamDetection"},'GitHub - liviaerxin/FastAPISpamDetection: Code for my Medium article: "How you can quickly deploy your ML models with\xa0FastAPI"')))}m.isMDXComponent=!0}}]);