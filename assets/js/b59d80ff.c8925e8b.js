"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7332],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(a),d=i,h=u["".concat(o,".").concat(d)]||u[d]||c[d]||r;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:i,s[1]=l;for(var m=2;m<r;m++)s[m]=a[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},14841:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var n=a(87462),i=(a(67294),a(3905));const r={foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/wiki-assembly.mdx"},authors:["frank"],tags:["Wiki Assembly"],description:"Wiki Assembly",keywords:["Wiki Assembly"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-11-22T00:00:00.000Z"),draft:!1,enableComments:!0},s="Wiki Assembly",l={permalink:"/blog/wiki-assembly",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/wiki-assembly.mdx",source:"@site/../../blog/wiki-assembly.mdx",title:"Wiki Assembly",description:"Wiki Assembly",date:"2023-11-22T00:00:00.000Z",formattedDate:"November 22, 2023",tags:[{label:"Wiki Assembly",permalink:"/blog/tags/wiki-assembly"}],readingTime:2.675,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/wiki-assembly.mdx"},authors:["frank"],tags:["Wiki Assembly"],description:"Wiki Assembly",keywords:["Wiki Assembly"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-11-22T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Wiki Network",permalink:"/blog/wiki-network"},nextItem:{title:"Celery",permalink:"/blog/python-celery"}},o={authorsImageUrls:[void 0]},m=[{value:"Assembly Instructions",id:"assembly-instructions",level:2},{value:"Assembly Opcodes",id:"assembly-opcodes",level:2},{value:"Assembly Oprands",id:"assembly-oprands",level:2},{value:"Register Operands",id:"register-operands",level:3},{value:"Memory Operands",id:"memory-operands",level:3},{value:"Immediate Operands",id:"immediate-operands",level:3},{value:"Bootstrap a Compiler",id:"bootstrap-a-compiler",level:2},{value:"Resources",id:"resources",level:2}],p={toc:m},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Why ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language is critical elementary foundation to the whole programming language from the lower-level language ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Go"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Rust"),"?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The most low-level language that is closely tied to the hardware such as ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU"),".",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," language is written to follow the ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU")," execution logic directly."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," language facilities a deeper understanding of computer architecture such as how the ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU")," functions.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm",metastring:'title="print.asm"',title:'"print.asm"'},'; print.asm\n; nasm -f elf64 print.asm && ld print.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .data\nmessage db, "Welcome,   to, Segmentation, Faults!, "\n\nsection .text\n\nglobal _start\n\n_printMessage:\n    mov rax, 4       ; System call number for sys_write\n    mov rbx, 1       ; File descriptor 1 is stdout\n    mov rcx, message ; Pointer to the message string\n    mov rdx, 32      ; Length of the message\n    int 0x80         ; Call kernel\n\n    ret ; Return from the function\n\n_exit:\n    mov rax, 1 ; System call number for sys_exit\n    mov rbx, 0 ; Exit code 0\n    int 0x80   ; Call kernel\n\n_start:\n    call _printMessage ; Call the print message function\n    mov  rax, 1        ; System call number for sys_exit\n    mov  rbx, 1        ; Exit code 0\n    int  0x80          ; Call kernel\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm",metastring:'title="sum.asm"',title:'"sum.asm"'},"; sum.asm\n; nasm -f elf64 sum.asm && ld sum.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .text\nglobal _start\n\n; Function to calculate the sum of two integers\nsum:\n    mov rax, rdi   ; Move the first argument (a) to rax\n    add rax, rsi   ; Add the second argument (b) to rax\n    ret            ; Return with the result in rax\n\n_start:\n    ; Example usage of the sum function\n    mov rdi, 5     ; First argument: a = 5\n    mov rsi, 7     ; Second argument: b = 7\n\n    call sum       ; Call the sum function\n\n    ; The result is now in rax\n    ; It can be used or printed, depending on the context\n    mov rdi, rax   ; Exit code 0\n\n    ; Exit the program\n    mov rax, 60    ; System call number for sys_exit\n    syscall        ; Make the system call\n")),(0,i.kt)("h2",{id:"assembly-instructions"},"Assembly Instructions"),(0,i.kt)("h2",{id:"assembly-opcodes"},"Assembly Opcodes"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://sparksandflames.com/files/x86InstructionChart.html"},"Intel x86 Assembler Instruction Set Opcode Table")),(0,i.kt)("p",null,"Assembly instructions are human readable representation of the assembly ",(0,i.kt)("inlineCode",{parentName:"p"},"Opcode")," which hex codes."),(0,i.kt)("h2",{id:"assembly-oprands"},"Assembly Oprands"),(0,i.kt)("h3",{id:"register-operands"},"Register Operands"),(0,i.kt)("h3",{id:"memory-operands"},"Memory Operands"),(0,i.kt)("h3",{id:"immediate-operands"},"Immediate Operands"),(0,i.kt)("h2",{id:"bootstrap-a-compiler"},"Bootstrap a Compiler"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Write a compiler C1 for language X in language Y"),(0,i.kt)("li",{parentName:"ol"},"Use the compiler C1 to write compiler C2 for language X in language X"),(0,i.kt)("li",{parentName:"ol"},"Now C2 is a fully self hosting environment.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools"},"Compilers: Principles, Techniques, and Tools - Wikipedia")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Bootstrapping initial compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C1"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"A small and simple compiler is created manually in machine code or written in a lower-level language like ",(0,i.kt)("inlineCode",{parentName:"li"},"assembly")," language."),(0,i.kt)("li",{parentName:"ol"},"[Option*]"," Translate the ",(0,i.kt)("inlineCode",{parentName:"li"},"assembly")," language into machine code manually if it's not written in machine code."),(0,i.kt)("li",{parentName:"ol"},"The initial compiler is just capable enough to understand a subset of the target language ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," it is supposed to compile."))),(0,i.kt)("li",{parentName:"ol"},"Use the initial compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C1")," to compile the compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C2")," written in language ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," while the ",(0,i.kt)("inlineCode",{parentName:"li"},"C2")," is also supposed to compile language ",(0,i.kt)("inlineCode",{parentName:"li"},"C"),"."),(0,i.kt)("li",{parentName:"ol"},"Now compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C2")," a fully self-compilation.")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/mikesmullin/6259449"},"https://gist.github.com/mikesmullin/6259449")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs.lmu.edu/~ray/notes/nasmtasutorial/"},"https://cs.lmu.edu/~ray/notes/nasmtasutorial/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf"},"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html"},"http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs61.seas.harvard.edu/site/2018/Asm1/"},"https://cs61.seas.harvard.edu/site/2018/Asm1/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://web.stanford.edu/class/cs107/guide/x86-64.html"},"https://web.stanford.edu/class/cs107/guide/x86-64.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html"},"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cs.uaf.edu/2016/fall/cs301/lecture/09_28_machinecode.html"},"https://www.cs.uaf.edu/2016/fall/cs301/lecture/09_28_machinecode.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html"},"https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html"},"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/"},"https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pacman128.github.io/static/pcasm-book.pdf"},"https://pacman128.github.io/static/pcasm-book.pdf")))}c.isMDXComponent=!0}}]);