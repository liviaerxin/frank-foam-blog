"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8050],{3905:(e,o,t)=>{t.d(o,{Zo:()=>c,kt:()=>f});var n=t(67294);function r(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function i(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?i(Object(t),!0).forEach((function(o){r(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function p(e,o){if(null==e)return{};var t,n,r=function(e,o){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||(r[t]=e[t]);return r}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),s=function(e){var o=n.useContext(l),t=o;return e&&(t="function"==typeof e?e(o):a(a({},o),e)),t},c=function(e){var o=s(e.components);return n.createElement(l.Provider,{value:o},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},u=n.forwardRef((function(e,o){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(t),u=r,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return t?n.createElement(f,a(a({ref:o},c),{},{components:t})):n.createElement(f,a({ref:o},c))}));function f(e,o){var t=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=u;var p={};for(var l in o)hasOwnProperty.call(o,l)&&(p[l]=o[l]);p.originalType=e,p[m]="string"==typeof e?e:r,a[1]=p;for(var s=2;s<i;s++)a[s]=t[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},14133:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var n=t(87462),r=(t(67294),t(3905));const i={},a="Friday, April 19, 2024",p={permalink:"/journal/2024/04/19/",source:"@site/../../journal/2024-04-19.md",title:"Friday, April 19, 2024",description:"Docker compose for development and production",date:"2024-04-19T00:00:00.000Z",formattedDate:"April 19, 2024",tags:[],readingTime:3.325,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"tmp",permalink:"/journal/tmp"},nextItem:{title:"Thursday, April 18, 2024",permalink:"/journal/2024/04/18/"}},l={authorsImageUrls:[]},s=[{value:"Docker compose for development and production",id:"docker-compose-for-development-and-production",level:2},{value:"Deploying a local Docker compose project for production",id:"deploying-a-local-docker-compose-project-for-production",level:2},{value:"How to automate deployment from development to production using Docker Compose",id:"how-to-automate-deployment-from-development-to-production-using-docker-compose",level:2},{value:"Setting up CI/CD with Docker Compose",id:"setting-up-cicd-with-docker-compose",level:2}],c={toc:s},m="wrapper";function d(e){let{components:o,...t}=e;return(0,r.kt)(m,(0,n.Z)({},c,t,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"docker-compose-for-development-and-production"},"Docker compose for development and production"),(0,r.kt)("p",null,"Understanding the nuances between development (",(0,r.kt)("inlineCode",{parentName:"p"},"dev"),") and production (",(0,r.kt)("inlineCode",{parentName:"p"},"prod"),") environments is crucial for efficient operations:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Database Infrastructure:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In development, engineers typically rely on local MySQL or MongoDB instances. However, for production-grade reliability and scalability, businesses often leverage managed database services provided by leading cloud platforms. As a result, the configuration of environment variables for database connections varies between the two environments."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Resource Allocation:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Development machines typically possess limited computing resources compared to production servers. Consequently, it's essential to optimize resource allocation during development by minimizing unnecessary services or configurations. This ensures efficient performance and cost-effectiveness."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Building Strategies:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"During development, engineers build and run Docker images locally to streamline the development process. Conversely, for production, a structured approach is adopted. This involves building and publishing images through Continuous Integration (CI) pipelines. Subsequently, the pre-built images are pulled from a registry for execution in the production environment.")))),(0,r.kt)("p",null,"Given these considerations, a one-size-fits-all approach, such as simply overriding configurations from a base Docker Compose file, may not suffice to address the unique requirements of each environment."),(0,r.kt)("p",null,"In summary, while Docker Compose serves as a valuable tool for local development and testing, its utility in production deployment may be limited. To meet the evolving needs of a growing application, businesses are encouraged to explore advanced deployment solutions, such as cloud-based Kubernetes pods, for scalable and resilient operations."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://news.ycombinator.com/item?id=32484008"},"Docker Compose best practices for dev and prod | Hacker News")),(0,r.kt)("h2",{id:"deploying-a-local-docker-compose-project-for-production"},"Deploying a local Docker compose project for production"),(0,r.kt)("p",null,"one common way to do it without CD/CI pipeline, is to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"build development images by using different/override docker-compose files and use .env that can be adapted for every environment."),(0,r.kt)("li",{parentName:"ol"},"push stable images to a container registry"),(0,r.kt)("li",{parentName:"ol"},"docker pull the images on the prod."),(0,r.kt)("li",{parentName:"ol"},"run the containers")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.reddit.com/r/docker/comments/s0fn94/how_to_deploy_a_local_docker_compose_project_to_a/"},"Reddit - Dive into anything")),(0,r.kt)("h2",{id:"how-to-automate-deployment-from-development-to-production-using-docker-compose"},"How to automate deployment from development to production using Docker Compose"),(0,r.kt)("p",null,"Organizing development and production configurations in Docker Compose can be achieved using various strategies, and the choice depends on your specific requirements and preferences. Here are two common approaches:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Using Two Docker Compose Files:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Development:")," Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," file tailored for development purposes. This file can include options for volumes, environment variables, ports, and other settings that facilitate the development workflow, such as live code reloading."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Production:")," Create a separate ",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.prod.yml")," file for production settings. This file should include configurations optimized for production, such as specifying production-ready images and environment variables suited for the production environment.")),(0,r.kt)("p",{parentName:"li"},"To deploy in production, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"-f")," flag to specify the production Docker Compose file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.prod.yml up -d\n")),(0,r.kt)("p",{parentName:"li"},"This approach offers clear separation between development and production configurations and makes it easier to manage different settings for each environment.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Using Different Environment Files:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Maintain a single Docker Compose file (",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.yml"),") that defines the services and their basic configurations."),(0,r.kt)("li",{parentName:"ul"},"Use different environment files for development (",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.override.yml"),") and production (",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.prod.yml"),"). These environment files can override configurations defined in the base ",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.yml"),"."),(0,r.kt)("li",{parentName:"ul"},"In the development environment file, you can specify volumes, environment variables for development-specific settings, and other configurations suited for development."),(0,r.kt)("li",{parentName:"ul"},"In the production environment file, you can specify production-ready image versions, environment variables for production, and any other configurations optimized for the production environment.")),(0,r.kt)("p",{parentName:"li"},"To run in development:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up -d\n")),(0,r.kt)("p",{parentName:"li"},"To run in production:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d\n")),(0,r.kt)("p",{parentName:"li"},"This approach keeps all configurations in a single Docker Compose file, with environment-specific settings separated into different files. It provides flexibility and simplifies deployment by allowing you to specify the environment at runtime."))),(0,r.kt)("p",null,"Both approaches have their merits, and the choice depends on factors such as the complexity of your project, team preferences, and deployment workflows. Whichever approach you choose, ensure that your configurations are well-organized, easy to maintain, and provide the necessary flexibility for both development and production environments."),(0,r.kt)("h2",{id:"setting-up-cicd-with-docker-compose"},"Setting up CI/CD with Docker Compose"))}d.isMDXComponent=!0}}]);