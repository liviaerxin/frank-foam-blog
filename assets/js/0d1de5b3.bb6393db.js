"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9193],{4610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>k,frontMatter:()=>d,metadata:()=>s,toc:()=>m});var a=n(87462),i=(n(67294),n(3905)),o=n(1841),l=n.n(o),r=n(55458);const d={foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/ffmpeg-on-cuda-container.mdx"},authors:["frank"],tags:["ffmpeg","docker","cuda","nvidia"],description:"FFmpeg on CUDA Container",keywords:["FFmpeg on CUDA Container"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-09-06T00:00:00.000Z"),draft:!1,enableComments:!0},p="Install FFmpeg on Nvidia CUDA Container",s={permalink:"/blog/ffmpeg-on-cuda-container",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/ffmpeg-on-cuda-container.mdx",source:"@site/../../blog/ffmpeg-on-cuda-container.mdx",title:"Install FFmpeg on Nvidia CUDA Container",description:"FFmpeg on CUDA Container",date:"2023-09-06T00:00:00.000Z",formattedDate:"September 6, 2023",tags:[{label:"ffmpeg",permalink:"/blog/tags/ffmpeg"},{label:"docker",permalink:"/blog/tags/docker"},{label:"cuda",permalink:"/blog/tags/cuda"},{label:"nvidia",permalink:"/blog/tags/nvidia"}],readingTime:1.41,hasTruncateMarker:!1,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/ffmpeg-on-cuda-container.mdx"},authors:["frank"],tags:["ffmpeg","docker","cuda","nvidia"],description:"FFmpeg on CUDA Container",keywords:["FFmpeg on CUDA Container"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-09-06T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"WPF",permalink:"/blog/wpf"},nextItem:{title:"Intel VROC RAID on Ubuntu",permalink:"/blog/ubuntu-intel-vroc-raid"}},c={authorsImageUrls:[void 0]},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step by Step",id:"step-by-step",level:2},{value:"Complete Dockerfile",id:"complete-dockerfile",level:2}],u={toc:m},g="wrapper";function k(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.nvidia.com/video-technologies/video-codec-sdk/12.0/ffmpeg-with-nvidia-gpu/index.html"},"Using FFmpeg with NVIDIA GPU Hardware Acceleration - NVIDIA Docs")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://developer.nvidia.com/blog/nvidia-ffmpeg-transcoding-guide/"},"NVIDIA FFmpeg Transcoding Guide | NVIDIA Technical Blog")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/user-guide.html"},"User Guide \u2014 container-toolkit 1.13.5 documentation")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/blog/learn-cuda"})),(0,i.kt)("p",null,"This documentation describes to install ",(0,i.kt)("inlineCode",{parentName:"p"},"FFmpeg")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"nvidia/cuda")," ",(0,i.kt)("strong",{parentName:"p"},"container")," to use the ",(0,i.kt)("strong",{parentName:"p"},"Nvidia GPU")," to accelerate encoding."),(0,i.kt)("p",null,"If you want to know ",(0,i.kt)("a",{parentName:"p",href:"https://www.cyberciti.biz/faq/how-to-install-ffmpeg-with-nvidia-gpu-acceleration-on-linux/"},"how to install FFmpeg with NVIDIA GPU on Linux"),", go to see that."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"FFmpeg")," can support hardware-based decoding and encoding for Nvidia GPU card. With the help of Nvidia GPU, ",(0,i.kt)("inlineCode",{parentName:"p"},"h264_nvenc")," can lead encoding speed with ",(0,i.kt)("strong",{parentName:"p"},"5x")," faster than ",(0,i.kt)("inlineCode",{parentName:"p"},"libx264")," in ",(0,i.kt)("strong",{parentName:"p"},"GTX1080")," card."),(0,i.kt)("p",null,"Let's see how to install everything one by one on the ",(0,i.kt)("strong",{parentName:"p"},"Nvidia CUDA Docker")," container ",(0,i.kt)("inlineCode",{parentName:"p"},"nvidia/cuda:12.2.0-devel-ubuntu20.04"),", in which CUDA toolkit and GPU driver are already included."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"It must use ",(0,i.kt)("inlineCode",{parentName:"p"},"nvidia/cuda:xxx-devel-xxx")," image to build ",(0,i.kt)("inlineCode",{parentName:"p"},"FFmpeg"),", because the ",(0,i.kt)("inlineCode",{parentName:"p"},"dev")," image contain all the necessary libraries."))),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Make sure ",(0,i.kt)("strong",{parentName:"p"},"Nvidia GPU Driver")," is installed in your host machine! As it will be mounted into the ",(0,i.kt)("strong",{parentName:"p"},"container"),". "),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"ldconfig")," to check if the required Nvidia GPU driver libraries are available inside the container. Such as,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"ldconfig -p | grep libcuda.\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"When running in the ",(0,i.kt)("inlineCode",{parentName:"p"},"nvidia/cuda")," Docker container, what Nvidia libraries(from the host machine) should be mounted inside the container are specified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"NVIDIA_DRIVER_CAPABILITIES")," env variable, see ",(0,i.kt)("a",{parentName:"p",href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/user-guide.html#driver-capabilities"},"driver-capabilities"),". Here for ",(0,i.kt)("inlineCode",{parentName:"p"},"FFmpeg")," to employ GPU, it should be included at least as ",(0,i.kt)("inlineCode",{parentName:"p"},"NVIDIA_DRIVER_CAPABILITIES=video,utility"),"."))),(0,i.kt)("h2",{id:"step-by-step"},"Step by Step"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run --rm --runtime=nvidia \\\n    -e NVIDIA_VISIBLE_DEVICES=all \\\n    -e NVIDIA_DRIVER_CAPABILITIES=compute,utility \\\n    nvidia/cuda nvidia-smi\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run --rm --runtime=nvidia \\\n    -e NVIDIA_VISIBLE_DEVICES=all \\\n    -e NVIDIA_DRIVER_CAPABILITIES=compute,utility \\\n    nvidia/cuda bash\n")),(0,i.kt)("h2",{id:"complete-dockerfile"},"Complete Dockerfile"),(0,i.kt)("p",null,"The source code is available at ",(0,i.kt)("a",{parentName:"p",href:"../code-snippets/dockerfiles/nvidia-cuda-ffmpeg/Dockerfile"},"Dockerfile")),(0,i.kt)(l(),{language:"yaml",title:"nvidia-cuda-ffmpeg/Dockerfile",mdxType:"CodeBlock"},r.Z))}k.isMDXComponent=!0},55458:(e,t,n)=>{n.d(t,{Z:()=>a});const a='# pull official base image, NOTE to use `devel`\nFROM nvidia/cuda:12.2.0-devel-ubuntu20.04\n\n# Set environment variables to prevent interactive prompts during installation\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies\nRUN apt-get update && \\\n    apt-get install -y wget git make build-essential pkg-config yasm cmake libtool libc6 libc6-dev unzip libnuma1 libnuma-dev && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Build and Install `ffnvcodec`\nRUN git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git\nRUN cd nv-codec-headers && \\\n    make install && \\\n    cd -\n\n# Build and Install `ffmpeg` with latest version\nRUN git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg/\nRUN cd ffmpeg && \\\n    ./configure --enable-cuda --enable-cuvid --enable-nvdec --enable-nvenc --enable-nonfree --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-shared && \\\n    make -j 8 && \\\n    make install\n\nCMD ["ffmpeg", "-version"]'}}]);