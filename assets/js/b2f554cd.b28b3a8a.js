"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{4556:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/build-system-c++","metadata":{"permalink":"/blog/build-system-c++","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/build-system-c++.md","source":"@site/../../blog/build-system-c++.md","title":"Build System C/C++","description":"","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[{"label":"Make","permalink":"/blog/tags/make"},{"label":"Ninja","permalink":"/blog/tags/ninja"},{"label":"MSBuild","permalink":"/blog/tags/ms-build"},{"label":"CMake","permalink":"/blog/tags/c-make"},{"label":"Meson","permalink":"/blog/tags/meson"}],"readingTime":0.105,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Build System C/C++","description":"","created":"2023-05-22T00:00:00.000Z","tags":["Make","Ninja","MSBuild","CMake","Meson"]},"nextItem":{"title":"Data Center","permalink":"/blog/data-center"}},"content":"[List of build automation software - Wikipedia](https://en.wikipedia.org/wiki/List_of_build_automation_software)\\n\\n## Build System\\n\\nMake\\n\\nNinja\\n\\nMSBuild\\n\\n## Build System Generator\\n\\nCMake\\n\\nMeson\\n\\n## CI"},{"id":"/data-center","metadata":{"permalink":"/blog/data-center","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/data-center.md","source":"@site/../../blog/data-center.md","title":"Data Center","description":"Economic Data","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":0.045,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Build System C/C++","permalink":"/blog/build-system-c++"},"nextItem":{"title":"Getting Started","permalink":"/blog/getting-started"}},"content":"## Economic Data\\n\\n[FRED ECONOMIC DATA](https://fred.stlouisfed.org/)\\n\\n[US inflation cpi](https://tradingeconomics.com/united-states/inflation-cpi)"},{"id":"/getting-started","metadata":{"permalink":"/blog/getting-started","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/getting-started.md","source":"@site/../../blog/getting-started.md","title":"Getting Started","description":"Welcome to your new foam workspace, let\'s get you started.","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":2.225,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Data Center","permalink":"/blog/data-center"},"nextItem":{"title":"Graphical User Interface(GUI)","permalink":"/blog/graphical-user-interface"}},"content":"Welcome to your new foam workspace, let\'s get you started.\\n\\n> if you are already familiar with Foam and don\'t need help, just remove the `docs` folder for a clean repo.\\n\\nLet\'s go through this to set up your repo:\\n\\n- [ ] if you are new with VS Code, see how to [[get-started-with-vscode]] and how to [[use-keyboard-shortcuts-for-editing]]\\n\\n- [ ] you can navigate the links between your notes by `cmd+click` (or `ctrl+click` on Windows) on a wikilink. You can go back with `ctrl+-`. Here, go to your [[inbox]]\\n\\n- [ ] to see how your notes are connected, execute the `Foam: Show Graph` command. See [[graph-visualization]].\\n\\n- [ ] #tags can be used to further organize your content. Look at the `Tag Explorer` view on the left panel to find and navigate the tags in your knowledge base. See [[tags-and-tag-explorer]].\\n\\n- [ ] Foam supports [[spell-checking]].\\n\\n- [ ] You can also paste images in your Foam, just press `cmd+alt+v` to create the image file and link to it from your note. See [[paste-images-from-clipboard]].\\n\\n- [ ] You can use Foam for your daily notes, or journaling. Execute now the `Foam: Open Daily Note` command to create a new file in your `journal` folder. See [[daily-notes]].\\n\\n- [ ] Want to see how to manage your tasks? Go to the [[todo]] note\\n\\n- [ ] The section at the end of this file contains wikilink definitions, which enable navigation of your notes from GitHub\'s web UI, and in general to make `[[wikilinks]]` understood by any Markdown parser. See [[link-reference-definitions]].\\n\\n- [ ] To explore all the Foam settings, press `cmd+,`, then `Extensions > Foam`\\n\\n- [ ] Living within VS Code, Foam can be customized in many ways! Look at the [Foam Recipes](https://foambubble.github.io/foam/recipes/recipes) for ideas!\\n\\n- [ ] Join the [Foam community on Discord](https://foambubble.github.io/join-discord/e), introduce yourself and leave a message on how you found Foam and how the onboarding went :) We are always keen to do better\\n\\n- [ ] Take the [Foam Welcome survey](http://foambubble.github.io/welcome-survey/e)! It helps us better understand your need and how we can make Foam better and better for you :)\\n\\n## Advanced Features\\n\\n- [ ] You can create [[note-templates]] for things like book reviews, people, daily notes (coming soon), and more!\\n\\n## About Foam\\n\\nFoam doesn\'t do all this magic on its own, it relies on some amazing extensions. Look at their documentation if you want to fully unlock the possibilities!\\n\\nHere they are:\\n\\n- [Markdown All In One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)\\n- [vscode-paste-image](https://github.com/mushanshitiancai/vscode-paste-image)\\n- [spellright](https://marketplace.visualstudio.com/items?itemName=ban.spellright)\\n\\nA special mention goes to [Markdown Links](https://marketplace.visualstudio.com/items?itemName=tchayen.markdown-links) and [Markdown Notes](https://marketplace.visualstudio.com/items?itemName=kortina.vscode-markdown-notes) which have now been replaced by our own implementation but were foundational to Foam\'s beginnings."},{"id":"/graphical-user-interface","metadata":{"permalink":"/blog/graphical-user-interface","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/graphical-user-interface.md","source":"@site/../../blog/graphical-user-interface.md","title":"Graphical User Interface(GUI)","description":"Modern GUI composition of:","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":1.155,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Getting Started","permalink":"/blog/getting-started"},"nextItem":{"title":"Inbox","permalink":"/blog/inbox"}},"content":"Modern GUI composition of:\\n\\n- Windowing System/Compositor\\n  - Quartz Compositor(OSX)\\n  - Desktop Window Manager(Windows)\\n  - X11(Linux)\\n  - Wayland(Linux)\\n  - SurfaceFlinger(Android)\\n- Graphic Rendering\\n  - Hardware-Accelerated Rendering\\n    - OpenGL\\n    - Vulkan\\n    - DirectX\\n  - Software Rendering\\n    - QT Rasterization Engine\\n\\nWindowing System\\n\\nIt\'s very essential to apply the `native Windowing System` library for Cross-platform GUI framework in different platforms. Here\'s a cue from [including native windowing system headers from GLFW](https://github.com/glfw/glfw/blob/3a60992a418aad88717db32353bec22e8bb7dab3/include/GLFW/glfw3native.h#L94-L118)\\n\\n```c\\n#if !defined(GLFW_NATIVE_INCLUDE_NONE)\\n #if defined(GLFW_EXPOSE_NATIVE_WIN32) || defined(GLFW_EXPOSE_NATIVE_WGL)\\n  /* This is a workaround for the fact that glfw3.h needs to export APIENTRY (for\\n   * example to allow applications to correctly declare a GL_KHR_debug callback)\\n   * but windows.h assumes no one will define APIENTRY before it does\\n   */\\n  #if defined(GLFW_APIENTRY_DEFINED)\\n   #undef APIENTRY\\n   #undef GLFW_APIENTRY_DEFINED\\n  #endif\\n  #include <windows.h>\\n #elif defined(GLFW_EXPOSE_NATIVE_COCOA) || defined(GLFW_EXPOSE_NATIVE_NSGL)\\n  #if defined(__OBJC__)\\n   #import <Cocoa/Cocoa.h>\\n  #else\\n   #include <ApplicationServices/ApplicationServices.h>\\n   #include <objc/objc.h>\\n  #endif\\n #elif defined(GLFW_EXPOSE_NATIVE_X11) || defined(GLFW_EXPOSE_NATIVE_GLX)\\n  #include <X11/Xlib.h>\\n  #include <X11/extensions/Xrandr.h>\\n #elif defined(GLFW_EXPOSE_NATIVE_WAYLAND)\\n  #include <wayland-client.h>\\n #endif\\n```\\n\\n[Windowing system - Wikipedia](https://en.wikipedia.org/wiki/Windowing_system)\\n\\n[GUI Under Linux | Baeldung on Linux](https://www.baeldung.com/linux/gui)\\n\\n[GTK - Wikipedia](https://en.wikipedia.org/wiki/GTK)\\n\\nGraphic Render APIs/Libraries\\n\\n[A Comparison of Modern Graphics APIs](https://alain.xyz/blog/comparison-of-modern-graphics-apis)\\n\\n## Android graphics\\n\\ntwo core pieces:\\n\\n- SurfaceFlinger\\n- Skia\\n\\n[Graphics \xa0|\xa0 Android Open Source Project](https://source.android.com/devices/graphics)\\n[Android Graphics Internals - Stack Overflow](https://stackoverflow.com/questions/4579573/android-graphics-internals)\\n\\n## WayLand\\n\\n[What is Wayland? \xb7 Writing Wayland clients](https://bugaevc.gitbooks.io/writing-wayland-clients/content/about-this-book/what-is-wayland.html)\\n\\n[The Hello Wayland Tutorial | FLOSS & Cia](https://hdante.wordpress.com/2014/07/08/the-hello-wayland-tutorial/)\\n\\n[How to use Wayland with C to make a Linux app | by Sergey Bugaev | Medium](https://medium.com/@bugaevc/how-to-use-wayland-with-c-to-make-a-linux-app-c2673a35ce05)"},{"id":"/inbox","metadata":{"permalink":"/blog/inbox","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/inbox.md","source":"@site/../../blog/inbox.md","title":"Inbox","description":"Build System thoughts and knowledge","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":0.385,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Graphical User Interface(GUI)","permalink":"/blog/graphical-user-interface"},"nextItem":{"title":"OpenCV tips","permalink":"/blog/opencv-tips"}},"content":"## Build System thoughts and knowledge\\n\\n[Build Automation Softwares](https://en.wikipedia.org/wiki/List_of_build_automation_software)\\n> generate build scripts(CMake, Meson) -> compile source code(make, ninja invoking clang, gcc) -> binary code -> package binary code and run automated test(CMake, Meson)Build System thoughts and knowledge\\n\\n## Build Personal Wiki Work Station\\n\\n### Personal Knowledge Management System\\n\\n[Foam](https://github.com/foambubble/foam)\\n\\n[GistPad](https://github.com/lostintangent/gistpad)\\n\\n### Host Project Hosted by Github Pages and Powered by Jekyll\\n\\n[setting up a GitHub Pages site with Jekyll](https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll)\\n\\n[How I created a beatiful and mini](http://joshualande.com/jekyll-github-pages-poole)"},{"id":"/opencv-tips","metadata":{"permalink":"/blog/opencv-tips","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/opencv-tips.md","source":"@site/../../blog/opencv-tips.md","title":"OpenCV tips","description":"Q: Whether the image/frame from VideoCapture is in BGR or YUV pixels format?","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":0.19,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Inbox","permalink":"/blog/inbox"},"nextItem":{"title":"Python Module","permalink":"/blog/py-module"}},"content":"Q: Whether the image/frame from VideoCapture is in `BGR` or `YUV` pixels format?\\nA:\\nVideoCapture will convert the image automatically to BGR colorspace.\\nyou can disable this conversion (and receive YUV) by setting the CAP_PROP_CONVERT_RGB property to false."},{"id":"/py-module","metadata":{"permalink":"/blog/py-module","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/py-module.md","source":"@site/../../blog/py-module.md","title":"Python Module","description":"Python Module Search Path","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":0.075,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"OpenCV tips","permalink":"/blog/opencv-tips"},"nextItem":{"title":"Python Benchmark","permalink":"/blog/python-benchmark"}},"content":"## Python Module Search Path\\n\\n[The Module Search Path](https://docs.python.org/3/tutorial/modules.html#the-module-search-path)\\n\\n[Introduction to Python module search path](https://www.pythontutorial.net/python-basics/python-module-search-path/)"},{"id":"/python-benchmark","metadata":{"permalink":"/blog/python-benchmark","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/python-benchmark.md","source":"@site/../../blog/python-benchmark.md","title":"Python Benchmark","description":"Ok, here is the cost of acquiring and releasing an uncontended lock","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":1.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Python Module","permalink":"/blog/py-module"},"nextItem":{"title":"Serialization","permalink":"/blog/serialization"}},"content":"Ok, here is the cost of acquiring and releasing an uncontended lock\\nunder Linux, with Python 3.2:\\n\\n```sh\\n$ ./python -m timeit \\\\\\n  -s \\"from threading import Lock; l=Lock(); a=l.acquire; r=l.release\\" \\\\\\n  \\"a(); r()\\"\\n10000000 loops, best of 3: 0.127 usec per loop\\n```\\n\\nAnd here is the cost of calling a dummy Python function:\\n\\n```sh\\n$ ./python -m timeit -s \\"def a(): pass\\" \\"a(); a()\\"\\n1000000 loops, best of 3: 0.221 usec per loop\\n```\\n\\nAnd here is the cost of calling a trivial C function (which returns the\\nFalse singleton):\\n\\n```sh\\n$ ./python -m timeit -s \\"a=bool\\" \\"a(); a()\\"\\n10000000 loops, best of 3: 0.164 usec per loop\\n```\\n\\nAlso, note that using the lock as a context manager is actually slower,\\nnot faster as you might imagine:\\n\\n```sh\\n$ ./python -m timeit -s \\"from threading import Lock; l=Lock()\\" \\\\\\n  \\"with l: pass\\"\\n1000000 loops, best of 3: 0.242 usec per loop\\n```\\n\\nAt least under Linux, there doesn\'t seem to be a lot of room for\\nimprovement in lock performance, to say the least.\\n\\nPS: RLock is now as fast as Lock:\\n\\n```sh\\n$ ./python -m timeit \\\\\\n-s \\"from threading import RLock; l=RLock(); a=l.acquire; r=l.release\\" \\\\\\n\\"a(); r()\\"\\n10000000 loops, best of 3: 0.114 usec per loop\\n```"},{"id":"/serialization","metadata":{"permalink":"/blog/serialization","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/serialization.md","source":"@site/../../blog/serialization.md","title":"Serialization","description":"Serialization","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":0.49,"hasTruncateMarker":false,"authors":[],"frontMatter":{"type":"data-structure","keywords":["MessagePack","msgpack","json","serialization","Protocol Buffers","Protobuf"],"tag":["msgpack","data structure"]},"prevItem":{"title":"Python Benchmark","permalink":"/blog/python-benchmark"},"nextItem":{"title":"Todo","permalink":"/blog/todo"}},"content":"[Serialization](https://en.wikipedia.org/wiki/Serialization)\\n\\n[The need for speed \u2014 Experimenting with message serialization](https://medium.com/@hugovs/the-need-for-speed-experimenting-with-message-serialization-93d7562b16e4)\\n\\n[MessagePack, Json, Protobuf](https://github.com/neuecc/MessagePack-CSharp/issues/819#issuecomment-586125191)\\n\\nIn computing, `serialization` is the process of translating a data structure or object into a format that can be stored(for example, in a file or memory buffer) or transmitted(for example, over a computer network) and reconstructed later (possibly in a different computer environment).\\n\\n## Json\\n\\n## MessagePack\\n\\n[msgpack GitHub](https://github.com/msgpack/msgpack)\\n\\n## Protocol Buffers\\n\\n[Protocol Buffers](https://developers.google.com/protocol-buffers)\\n\\n## Supported Features\\n\\n| Protocol    | Discriminator Property & Polymorphism |\\n| ----------- | :-----------------------------------: |\\n| Json        |                   \u2714\ufe0f                   |\\n| MessagePack |                   \u2714\ufe0f                   |\\n| Protobuf    |                   \u2716\ufe0f                   |"},{"id":"/todo","metadata":{"permalink":"/blog/todo","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../../blog/todo.md","source":"@site/../../blog/todo.md","title":"Todo","description":"You can create todos in Foam.","date":"2023-05-29T15:58:58.000Z","formattedDate":"May 29, 2023","tags":[],"readingTime":0.58,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Serialization","permalink":"/blog/serialization"}},"content":"You can create todos in Foam.\\n\\n- [] Host this wiki project with Jekyll and GitHub Pages. [[inbox#Build Personal Wiki Work Station]]\\n  - [] use minimal theme\\n  - [] apply navigation bar\\n  - [] set up search bar\\n- [] Improve routing table understanding. [[network-diagnosis#Network Diagnosis]]\\n- [] Test serialization/de-serialization performance for json, msgpack and protobuf.\\n- [] Try Homebridge on Jetson nano.\\n- [] Research on Wayland. [[graphical-user-interface#WayLand]]\\n- [] Learn GLFW\\n  - [A simple OpenGL animation with glfw, ste - C++ Articles](https://cplusplus.com/articles/NvCRko23/)\\n  - [The case of OpenGL, in C++, on m1 mac - Antonin Carette](https://carette.xyz/posts/opengl_and_cpp_on_m1_mac/)\\n  - [GitHub - datenwolf/linmath.h: a lean linear math library, aimed at graphics programming. Supports vec3, vec4, mat4x4 and quaternions](https://github.com/datenwolf/linmath.h)"}]}')}}]);