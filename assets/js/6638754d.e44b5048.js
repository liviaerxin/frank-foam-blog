"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9066],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=i,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||a;return n?r.createElement(g,o(o({ref:t},s),{},{components:n})):r.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29818:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=n(87462),i=(n(67294),n(3905));const a={authors:["frank"],tags:["Wiki","Compiler"],description:"Introduction for writing a Compiler in practice",keywords:["Writing Compiler"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-02-19T00:00:00.000Z"),draft:!1,enableComments:!0},o="Wiki Compiler",l={permalink:"/blog/wiki-compiler",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/wiki-compiler.mdx",source:"@site/../../blog/wiki-compiler.mdx",title:"Wiki Compiler",description:"Introduction for writing a Compiler in practice",date:"2024-02-19T00:00:00.000Z",formattedDate:"February 19, 2024",tags:[{label:"Wiki",permalink:"/blog/tags/wiki"},{label:"Compiler",permalink:"/blog/tags/compiler"}],readingTime:4.165,hasTruncateMarker:!1,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{authors:["frank"],tags:["Wiki","Compiler"],description:"Introduction for writing a Compiler in practice",keywords:["Writing Compiler"],image:"https://i.imgur.com/mErPwqL.png",date:"2024-02-19T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Algorithms",permalink:"/blog/algorithms"},nextItem:{title:"Wiki Socket",permalink:"/blog/wiki-socket"}},p={authorsImageUrls:[void 0]},m=[{value:"Parser",id:"parser",level:2},{value:"Difference between Compiler and Interpreter",id:"difference-between-compiler-and-interpreter",level:2},{value:"Bootstrap a compiler",id:"bootstrap-a-compiler",level:2},{value:"Where did the existing compiler <code>C1</code> come from?",id:"where-did-the-existing-compiler-c1-come-from",level:3},{value:"Implementations",id:"implementations",level:3},{value:"Compiler for a subset of C language bootstrapping from Python",id:"compiler-for-a-subset-of-c-language-bootstrapping-from-python",level:3},{value:"Compiler for a subset of C language bootstrapping from C",id:"compiler-for-a-subset-of-c-language-bootstrapping-from-c",level:3},{value:"Compiler bootstrapping from assembly",id:"compiler-bootstrapping-from-assembly",level:3},{value:"Compiler bootstrapping from HEX",id:"compiler-bootstrapping-from-hex",level:3}],s={toc:m},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Let's have a look at the functions that a compiler should be able to build."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"lexer(Lexical analysis)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"generate tokens from source code"))),(0,i.kt)("li",{parentName:"ol"},"parser",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"construct abstract syntax tree(AST) from tokens"))),(0,i.kt)("li",{parentName:"ol"},"code generation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"generate low-level code, such as assembly code or machine code")))),(0,i.kt)("h2",{id:"parser"},"Parser"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BNF")," syntax is used to for computer to understand the expression, and is a critical concept to be followed to sequently parse the tokens to AST tree. Certainly, only one loop on the tokens is enough, which makes it very efficient."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BNF")," syntax for arithmetic operations grammar, including ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\\"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"u-"),"(unary ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),") ."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"expression  :   term\n            |   expression `+` expression\n            |   expression `-` expression\n\nterm        :   factor\n            |   term `*` term\n            |   term `/` term\n\nfactor      :   NUMBER\n            |   `(` expression `)`\n            |   `u-`factor\n            |   `u+`factor\n\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BNF")," syntax for arithmetic operations and variable assignment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"expression  :   term\n            |   expression `+` expression\n            |   expression `-` expression\n\nterm        :   factor\n            |   term `*` term\n            |   term `/` term\n            |   term `%` term\n\nfactor      :   NUMBER\n            |   ID\n            |   `(` expression `)`\n            |   `u-`factor\n            |   `u+`factor\n            |   assignment\n\nassignment  :   ID `=` expression\n")),(0,i.kt)("p",null,"In addition, ",(0,i.kt)("inlineCode",{parentName:"p"},"BNF")," can also be applied to define regular expressions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'expression      :   term\n                |   term `|` term\n\nterm            :   factor\n                |   term term\n\nfactor          :   atom\n                |   atom `*`\n\natom            :   CHAR\n                | `(` expression `)`\n\nCHAR            : any valid character except meta characters (e.g., "*", "|", "(")\n')),(0,i.kt)("h2",{id:"difference-between-compiler-and-interpreter"},"Difference between Compiler and Interpreter"),(0,i.kt)("p",null,"an ",(0,i.kt)("strong",{parentName:"p"},"interpreter")," also does ",(0,i.kt)("inlineCode",{parentName:"p"},"lexer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parser")," jobs as a compiler does in step 1 and 2, but instead of generating low-level code, the ",(0,i.kt)("strong",{parentName:"p"},"interpreter")," generates the results directly."),(0,i.kt)("h2",{id:"bootstrap-a-compiler"},"Bootstrap a compiler"),(0,i.kt)("p",null,"A new programming language and a compiler written also in the new language is supposed to develop from an existing language. The progress is called ",(0,i.kt)("strong",{parentName:"p"},"bootstrapping"),", which can be summarized as,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"C1  + L1  -> C20\nC20 + L2u -> C21\nC21 + L2  -> C22\nC22 + L2  -> C23\nC23 + L2  -> C24\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"L1")," : an existing language\n",(0,i.kt)("inlineCode",{parentName:"p"},"C1")," : an existing compiler for language ",(0,i.kt)("inlineCode",{parentName:"p"},"L1"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"C20"),": a compiler written in language ",(0,i.kt)("inlineCode",{parentName:"p"},"L1")," for language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2u"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"C21"),": a compiler written in language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2u")," for language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"L2u"),": is subset of language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2")),(0,i.kt)("p",null,"Bootstrapping stage:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Write a bootstrap compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20")," to understand language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2u"),"(a subset of language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2"),") in using existed language ",(0,i.kt)("inlineCode",{parentName:"li"},"L1")," and its corresponding compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C1"),"."),(0,i.kt)("li",{parentName:"ol"},"Use the compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20")," and language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2u")," to write the compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," to understand language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2"),"."),(0,i.kt)("li",{parentName:"ol"},"Now ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," is a fully self-hosted compiler, as well as its descendants ",(0,i.kt)("inlineCode",{parentName:"li"},"C22"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"C23"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"C24"),".")),(0,i.kt)("h3",{id:"where-did-the-existing-compiler-c1-come-from"},"Where did the existing compiler ",(0,i.kt)("inlineCode",{parentName:"h3"},"C1")," come from?"),(0,i.kt)("p",null,"There is no need to use a compiler ",(0,i.kt)("inlineCode",{parentName:"p"},"C1")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"L1")," if you write the bootstrap compiler ",(0,i.kt)("inlineCode",{parentName:"p"},"C20")," in machine code. This solves the chicken-and-egg problem totally for programming languages."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Bootstrapping initial compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"A small and simple compiler is created manually in machine code or written in ",(0,i.kt)("inlineCode",{parentName:"li"},"assembly")," language."),(0,i.kt)("li",{parentName:"ol"},"[Option*]"," Translate the ",(0,i.kt)("inlineCode",{parentName:"li"},"assembly")," language into machine code manually if it's not written in machine code."),(0,i.kt)("li",{parentName:"ol"},"The initial compiler is just capable enough to understand a subset of the target language ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," it is supposed to compile."))),(0,i.kt)("li",{parentName:"ol"},"Use the initial compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20")," to compile the compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," written in language ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," while the ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," is also supposed to compile language ",(0,i.kt)("inlineCode",{parentName:"li"},"C"),"."),(0,i.kt)("li",{parentName:"ol"},"Now compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," a fully self-compilation.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a"},"Strange Loops: Ken Thompson and the Self-referencing C Compiler | ScienceBlogs")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29"},"Bootstrapping (compilers) - Wikipedia")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools"},"Compilers: Principles, Techniques, and Tools - Wikipedia")),(0,i.kt)("h3",{id:"implementations"},"Implementations"),(0,i.kt)("p",null,"Interpreter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rswier/c4"},"GitHub - rswier/c4: C in four functions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lotabout/write-a-C-interpreter"},"GitHub - lotabout/write-a-C-interpreter: Write a simple interpreter of C. Inspired by c4 and largely based on it."))),(0,i.kt)("p",null,"Self-hosted Compiler:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/DoctorWkt/acwj"},"GitHub - DoctorWkt/acwj: A Compiler Writing Journey")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/certik/bcompile"},"GitHub - certik/bcompile: Bootstrapping a simple compiler from nothing"))),(0,i.kt)("p",null,"The basic knowledge of ",(0,i.kt)("inlineCode",{parentName:"p"},"lexer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parser")," is critical and necessary for developing a programming language, "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flex/lex")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"yacc/parser"))),(0,i.kt)("h3",{id:"compiler-for-a-subset-of-c-language-bootstrapping-from-python"},"Compiler for a subset of C language bootstrapping from Python"),(0,i.kt)("p",null,"Recently, I am becoming interested in building a ",(0,i.kt)("inlineCode",{parentName:"p"},"lexer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parser")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"code generator")," to try to create a mini language and deep insight of how ",(0,i.kt)("inlineCode",{parentName:"p"},"GCC")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Clang/LLVM")," do their jobs."),(0,i.kt)("p",null,"For educational purposes, learning in practice is my favorite approach to grasp an overview."),(0,i.kt)("p",null,"Let's do it!"),(0,i.kt)("p",null,"Prerequisites:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Python for writing the bootstrap compiler ")),(0,i.kt)("p",null,"I use ",(0,i.kt)("a",{parentName:"p",href:"https://ply.readthedocs.io/_/downloads/en/latest/pdf/"},"ply"),", a pure Python implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"lex")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"yacc")," tools to facilitate me to write the bootstrap compiler for the subset of C language."),(0,i.kt)("h3",{id:"compiler-for-a-subset-of-c-language-bootstrapping-from-c"},"Compiler for a subset of C language bootstrapping from C"),(0,i.kt)("p",null,"Prerequisites:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An existing ",(0,i.kt)("inlineCode",{parentName:"li"},"GCC")," for writing the bootstrap compiler")),(0,i.kt)("p",null,"Here are some popular tutorials from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/DoctorWkt/acwj"},"GitHub - DoctorWkt/acwj: A Compiler Writing Journey"),"."),(0,i.kt)("p",null,"You can also refer ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lotabout/write-a-C-interpreter"},"GitHub - lotabout/write-a-C-interpreter")," although I prefer classifying it as ",(0,i.kt)("strong",{parentName:"p"},"interpreter")," not a complete compiler."),(0,i.kt)("h3",{id:"compiler-bootstrapping-from-assembly"},"Compiler bootstrapping from assembly"),(0,i.kt)("h3",{id:"compiler-bootstrapping-from-hex"},"Compiler bootstrapping from HEX"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/certik/bcompile"},"GitHub - certik/bcompile: Bootstrapping a simple compiler from nothing")))}u.isMDXComponent=!0}}]);