"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6863],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,k=u["".concat(o,".").concat(d)]||u[d]||m[d]||l;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_label:"Learn CMake",description:"Learn CMake",keywords:["cmake","interface","project structure"],image:"https://i.imgur.com/mErPwqL.png",tags:["cmake","template"],last_update:{date:new Date("2023-06-25T00:00:00.000Z"),author:"frank"}},i="Learn CMake",p={unversionedId:"learn-cmake",id:"learn-cmake",title:"Learn CMake",description:"Learn CMake",source:"@site/../../docs/learn-cmake.md",sourceDirName:".",slug:"/learn-cmake",permalink:"/docs/learn-cmake",draft:!1,editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/learn-cmake.md",tags:[{label:"cmake",permalink:"/docs/tags/cmake"},{label:"template",permalink:"/docs/tags/template"}],version:"current",lastUpdatedBy:"frank",lastUpdatedAt:1687651200,formattedLastUpdatedAt:"Jun 25, 2023",frontMatter:{sidebar_label:"Learn CMake",description:"Learn CMake",keywords:["cmake","interface","project structure"],image:"https://i.imgur.com/mErPwqL.png",tags:["cmake","template"],last_update:{date:"2023-06-25T00:00:00.000Z",author:"frank"}},sidebar:"tutorialSidebar",previous:{title:"Inspect Shared Library",permalink:"/docs/inspect-shared-library"},next:{title:"Learn CUDA",permalink:"/docs/learn-cuda"}},o={},c=[{value:"CMake Project Structure",id:"cmake-project-structure",level:2}],s={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"learn-cmake"},"Learn CMake"),(0,r.kt)("h2",{id:"cmake-project-structure"},"CMake Project Structure"),(0,r.kt)("p",null,"A typical ",(0,r.kt)("strong",{parentName:"p"},"CMake")," project can be regarded to has three ",(0,r.kt)("inlineCode",{parentName:"p"},"interfaces"),"(someone call it ",(0,r.kt)("inlineCode",{parentName:"p"},"trees"),"):"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Source Interface"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"project_root\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 simple_example.cpp\n\u251c\u2500\u2500 simple_lib.cpp\n\u2514\u2500\u2500 simple_lib.hpp\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Build Interface"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"project_root\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 simple_example.cpp\n\u251c\u2500\u2500 simple_lib.cpp\n\u251c\u2500\u2500 simple_lib.hpp\n\u2514\u2500\u2500 build\n    \u2514\u2500\u2500 CMakeCache.txt\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Install Interface"),":"),(0,r.kt)("p",null,"This interface is located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"CMAKE_INSTALL_PREFIX"),", of which default value is platform-dependent. By default, it is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/local")," on Unix-like systems (Linux, macOS) and ",(0,r.kt)("inlineCode",{parentName:"p"},"C:/Program Files/<Project Name>")," on Windows.."),(0,r.kt)("p",null,"To change it, you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"-DCMAKE_INSTALL_PREFIX")," argument during CMake ",(0,r.kt)("inlineCode",{parentName:"p"},"configuration")," step, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cmake -B build -S . -DCMAKE_INSTALL_PREFIX=/my/custom/installation/path\n")),(0,r.kt)("p",null,"Alternatively, you can change it by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"--prefix"),"(it can be relative path) argument during CMake ",(0,r.kt)("inlineCode",{parentName:"p"},"install")," step, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'cmake --install build --prefix "/my/custom/installation/path"\n')),(0,r.kt)("p",null,"It's recommended to use a default install layout as ",(0,r.kt)("inlineCode",{parentName:"p"},"GNUInstallDirs"),"."),(0,r.kt)("p",null,"When setting ",(0,r.kt)("inlineCode",{parentName:"p"},'cmake --install build --prefix "./install'),", the ",(0,r.kt)("strong",{parentName:"p"},"install")," interface will be like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"project_root\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 simple_example.cpp\n\u251c\u2500\u2500 simple_lib.cpp\n\u251c\u2500\u2500 simple_lib.hpp\n\u251c\u2500\u2500 build\n\u2502   \u2514\u2500\u2500 CMakeCache.txt\n\u2514\u2500\u2500 install\n    \u251c\u2500\u2500 bin\n    \u2502   \u2514\u2500\u2500 executables\n    \u251c\u2500\u2500 sbin\n    \u2502   \u2514\u2500\u2500 sysadmin executables\n    \u251c\u2500\u2500 lib\n    \u2502   \u251c\u2500\u2500 compiled libraries (*.so (unix) or *.dll (windows))\n    \u2502   \u2514\u2500\u2500 library archive files (*.lib (windows))\n    \u251c\u2500\u2500 libexec\n    \u2502   \u2514\u2500\u2500 executables not directly invoked by user\n    \u251c\u2500\u2500 include\n    \u2502   \u2514\u2500\u2500 header files\n    \u2514\u2500\u2500 doc\n       \u2514\u2500\u2500 documentation\n")))}m.isMDXComponent=!0}}]);