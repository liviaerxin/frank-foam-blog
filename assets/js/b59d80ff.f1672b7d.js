"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7332],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(a),c=i,k=u["".concat(o,".").concat(c)]||u[c]||d[c]||l;return a?n.createElement(k,r(r({ref:t},p),{},{components:a})):n.createElement(k,r({ref:t},p))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<l;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},14841:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=a(87462),i=(a(67294),a(3905));const l={foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/wiki-assembly.mdx"},authors:["frank"],tags:["Wiki Assembly"],description:"Wiki Assembly",keywords:["Wiki Assembly"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-11-22T00:00:00.000Z"),draft:!1,enableComments:!0},r="Wiki Assembly",s={permalink:"/blog/wiki-assembly",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/wiki-assembly.mdx",source:"@site/../../blog/wiki-assembly.mdx",title:"Wiki Assembly",description:"Wiki Assembly",date:"2023-11-22T00:00:00.000Z",formattedDate:"November 22, 2023",tags:[{label:"Wiki Assembly",permalink:"/blog/tags/wiki-assembly"}],readingTime:6.39,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/wiki-assembly.mdx"},authors:["frank"],tags:["Wiki Assembly"],description:"Wiki Assembly",keywords:["Wiki Assembly"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-11-22T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Wiki Network",permalink:"/blog/wiki-network"},nextItem:{title:"Diagram Wiki",permalink:"/blog/wiki-diagram"}},o={authorsImageUrls:[void 0]},m=[{value:"Assembler",id:"assembler",level:2},{value:"XXX",id:"xxx",level:3},{value:"Memory Layout",id:"memory-layout",level:2},{value:"Memory Layout of a Running Program",id:"memory-layout-of-a-running-program",level:2},{value:"Label",id:"label",level:2},{value:"Instruction",id:"instruction",level:2},{value:"Opcode",id:"opcode",level:3},{value:"Oprand",id:"oprand",level:3},{value:"Register Operand",id:"register-operand",level:4},{value:"Immediate Operand",id:"immediate-operand",level:4},{value:"Memory Operand",id:"memory-operand",level:4},{value:"Instruction Encoding",id:"instruction-encoding",level:3},{value:"NASM x86_64 cheat sheet",id:"nasm-x86_64-cheat-sheet",level:2},{value:"GAS aarch64 cheat sheet",id:"gas-aarch64-cheat-sheet",level:2},{value:"Assembly&#39;s Role in Compiler",id:"assemblys-role-in-compiler",level:2},{value:"Resources",id:"resources",level:2}],p={toc:m},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Why ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language is important to to learn?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The most low-level language that is closely tied to the hardware such as ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," code implements a symbolic (human-readable) representation of the binary machine code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," language is written to follow the ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU")," execution logic directly."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," language facilities a deeper understanding how ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU")," actually do its job.")),(0,i.kt)("p",null,"Why ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language is critical elementary foundation to other higher-level language, E.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),"?"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," code is the important medium for compiling ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," code to machine code.\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," program being compiled to an binary object file, the ",(0,i.kt)("inlineCode",{parentName:"p"},"GCC")," compiler will do following:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"C")," code will be compiled into ",(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," code"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," code will be translated into machine code")),(0,i.kt)("p",null,"Is ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language cross-platform?"),(0,i.kt)("p",null,"No, ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language is specific in the specific platform. E.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"X86")," CPU-architecture has its own ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," instruction sets as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"arm")," CPU."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," is CPU-dependent as machine code is CPU-dependent, while ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," language is CPU-independent for cross-platform."),(0,i.kt)("p",null,"Is the first version of ",(0,i.kt)("inlineCode",{parentName:"p"},"GCC")," written in ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly"),"?"),(0,i.kt)("p",null,"No, ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," started with the ",(0,i.kt)("inlineCode",{parentName:"p"},"BCPL")," language, ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/18125490/how-was-the-first-c-compiler-written"})),(0,i.kt)("h2",{id:"assembler"},"Assembler"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GNU assembler (GAS) ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"x86-64 GNU assembler ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"AT&T syntax"))),(0,i.kt)("li",{parentName:"ul"},"aarch64 GNU assembler",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"aarch64/arm64 syntax"))))),(0,i.kt)("li",{parentName:"ul"},"Clang Assembler",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"external Assembler",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"GNU Assembler"))),(0,i.kt)("li",{parentName:"ul"},"LLVM\u2019s integrated assembler"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/Toolchain.html#assembler"}),"  "))),(0,i.kt)("li",{parentName:"ul"},"Netwide assembler (NASM)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Intel syntax"),(0,i.kt)("li",{parentName:"ul"},"x86-64",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"macOS"),(0,i.kt)("li",{parentName:"ul"},"linux"),(0,i.kt)("li",{parentName:"ul"},"windows"))))),(0,i.kt)("li",{parentName:"ul"},"MASM",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Intel syntax")))),(0,i.kt)("h3",{id:"xxx"},"XXX"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm",metastring:'title="print.asm"',title:'"print.asm"'},'; print.asm\n; nasm -f elf64 print.asm && ld print.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .data\nmessage db, "Welcome,   to, Segmentation, Faults!, "\n\nsection .text\n\nglobal _start\n\n_printMessage:\n    mov rax, 4       ; System call number for sys_write\n    mov rbx, 1       ; File descriptor 1 is stdout\n    mov rcx, message ; Pointer to the message string\n    mov rdx, 32      ; Length of the message\n    int 0x80         ; Call kernel\n\n    ret ; Return from the function\n\n_exit:\n    mov rax, 1 ; System call number for sys_exit\n    mov rbx, 0 ; Exit code 0\n    int 0x80   ; Call kernel\n\n_start:\n    call _printMessage ; Call the print message function\n    mov  rax, 1        ; System call number for sys_exit\n    mov  rbx, 1        ; Exit code 0\n    int  0x80          ; Call kernel\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm",metastring:'title="sum.asm"',title:'"sum.asm"'},"; sum.asm\n; nasm -f elf64 sum.asm && ld sum.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .text\nglobal _start\n\n; Function to calculate the sum of two integers\nsum:\n    mov rax, rdi   ; Move the first argument (a) to rax\n    add rax, rsi   ; Add the second argument (b) to rax\n    ret            ; Return with the result in rax\n\n_start:\n    ; Example usage of the sum function\n    mov rdi, 5     ; First argument: a = 5\n    mov rsi, 7     ; Second argument: b = 7\n\n    call sum       ; Call the sum function\n\n    ; The result is now in rax\n    ; It can be used or printed, depending on the context\n    mov rdi, rax   ; Exit code 0\n\n    ; Exit the program\n    mov rax, 60    ; System call number for sys_exit\n    syscall        ; Make the system call\n")),(0,i.kt)("h2",{id:"memory-layout"},"Memory Layout"),(0,i.kt)("p",null,"The structure of an assembly file generally consists of serval section:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".text")," section:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".text")," section is generally read-only. It is typically used for storing executable code, and it is not intended to be modified during program execution."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".text")," section contains the machine code instructions that the processor will execute."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".text")," section contains global constant data."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".data")," section:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".data")," section is writable. It is used for storing initialized data that can be modified during the execution of the program."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".data")," section contains global variable data."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".bss")," section: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It's mostly the same with ",(0,i.kt)("inlineCode",{parentName:"li"},".data")," section except it's used for storing uninitialized data "))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".rodata")," section:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It is used for read-only data, such as constant strings.")))),(0,i.kt)("p",null,"Here's a simple example illustrating the use of these sections:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},'.section .text\n.global _start\n\n_start:\n    // Code goes here\n\n.section .data\nmy_data:\n    .word 42   // Initialized data\n\n.section .bss\nmy_uninitialized_data:\n    .skip 4    // Uninitialized data, occupies 4 bytes\n\n.section .rodata\nmy_string:\n    .asciz "Hello, World!"  // Read-only data\n')),(0,i.kt)("p",null,"A compiled program's memory layout consists of these segments.\nA running program's memory layout consists of these segments, and also ",(0,i.kt)("inlineCode",{parentName:"p"},"heap")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"stack")," memory."),(0,i.kt)("h2",{id:"memory-layout-of-a-running-program"},"Memory Layout of a Running Program"),(0,i.kt)("p",null,"A running program typically consists of serval segments or sections, each serving a specific purpose but common sections include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Stack"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Stores local variables and function call information."),(0,i.kt)("li",{parentName:"ul"},"Memory is automatically allocated and de-allocated as functions are called and return."),(0,i.kt)("li",{parentName:"ul"},"Register(",(0,i.kt)("inlineCode",{parentName:"li"},"sp")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"arm64"),", stack pointer) is used to manage and point to the stack memory."),(0,i.kt)("li",{parentName:"ul"},"Size is limited(may lead to ",(0,i.kt)("strong",{parentName:"li"},"stack overflow"),").",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"set via ",(0,i.kt)("inlineCode",{parentName:"li"},"ulimit -s")," in linux."))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Heap"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Dynamic memory managed by programmer at runtime."),(0,i.kt)("li",{parentName:"ul"},"Memory is allocated and deallocated explicitly using functions like ",(0,i.kt)("inlineCode",{parentName:"li"},"malloc"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"free")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"C"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"new"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"delete")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"C++"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"brk")," system call in ",(0,i.kt)("inlineCode",{parentName:"li"},"assembly")," etc."),(0,i.kt)("li",{parentName:"ul"},"Store dynamic data that can be shared across functions. Data lifecycle is not bound to functions."),(0,i.kt)("li",{parentName:"ul"},"Size is much larger than the stack,"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Data"),"(",(0,i.kt)("inlineCode",{parentName:"li"},".data"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".bss"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Stores global variables/constants, separated into initialized and uninitialized"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Text"),"(",(0,i.kt)("inlineCode",{parentName:"li"},".text"),"): ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Stores the code being executed")))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://courses.engr.illinois.edu/cs225/fa2022/resources/stack-heap/"},"CS 225 | Stack and Heap Memory")),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("h2",{id:"instruction"},"Instruction"),(0,i.kt)("p",null,"Assembly instructions are human readable representation of the machine code as CPU can only understand the machine code."),(0,i.kt)("p",null,"Instruction: Opcode + Oprand "),(0,i.kt)("h3",{id:"opcode"},"Opcode"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://sparksandflames.com/files/x86InstructionChart.html"},"Intel x86 Assembler Instruction Set Opcode Table")),(0,i.kt)("h3",{id:"oprand"},"Oprand"),(0,i.kt)("p",null,"Data area"),(0,i.kt)("h4",{id:"register-operand"},"Register Operand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov   rdi, rsi\n")),(0,i.kt)("h4",{id:"immediate-operand"},"Immediate Operand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov   rdi, 0x21\nmov   rdi, 5\nmov   edi, 0x21314151\n")),(0,i.kt)("p",null,"in ",(0,i.kt)("inlineCode",{parentName:"p"},"aarch64"),", the immediate value is subject to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Arithmetic instructions (add{s}, sub{s}, cmp, cmn) take a 12-bit unsigned immediate with an optional 12-bit left shift."),(0,i.kt)("li",{parentName:"ul"},"Move instructions (movz, movn, movk) take a 16-bit immediate optionally shifted to any 16-bit-aligned position within the register."),(0,i.kt)("li",{parentName:"ul"},"Address calculations (adr, adrp) take a 21-bit signed immediate, although there's no actual syntax to specify it directly - to do so you'd have to resort to assembler expression trickery to generate an appropriate \"label\"."),(0,i.kt)("li",{parentName:"ul"},'Logical instructions (and{s}, orr, eor, tst) take a "bitmask immediate".')),(0,i.kt)("h4",{id:"memory-operand"},"Memory Operand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov   rdi, [sdi]\n")),(0,i.kt)("h3",{id:"instruction-encoding"},"Instruction Encoding"),(0,i.kt)("p",null,"Assembler will encode the human-readable instruction into machine code."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"aarch64"),", the encoding instruction is ",(0,i.kt)("strong",{parentName:"li"},"fixed-size"),"(4 bytes) machine code."),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"x86_64"),", the encoding instruction is ",(0,i.kt)("strong",{parentName:"li"},"non-fixed-size"),"(up to 16 bytes) machine code.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://www.c-jump.com/CIS77/CPU/x86/lecture.html"},"Encoding Real x86 Instructions")),(0,i.kt)("p",null,"Let's have a glimpse on the impact of the ",(0,i.kt)("strong",{parentName:"p"},"fixed/non-fixed")," encoding."),(0,i.kt)("p",null,"In order to load 32-bit integer, ",(0,i.kt)("inlineCode",{parentName:"p"},"x86_64")," need only ",(0,i.kt)("strong",{parentName:"p"},"one")," instruction while more instructions are needed for ",(0,i.kt)("inlineCode",{parentName:"p"},"aarch64")," to do that."),(0,i.kt)("p",null,"Load a 32-bit integer ",(0,i.kt)("inlineCode",{parentName:"p"},"0x1a2b3c4d")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"x86_64"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov     rid, 0x1a2b3c4d\n")),(0,i.kt)("p",null,"Load a 32-bit integer 32-bit ",(0,i.kt)("inlineCode",{parentName:"p"},"0x1a2b3c4d")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"aarch64"),"(the immediate value in ",(0,i.kt)("inlineCode",{parentName:"p"},"mov")," must be in the range of ",(0,i.kt)("inlineCode",{parentName:"p"},"16-bit"),", so it needs ",(0,i.kt)("strong",{parentName:"p"},"two")," instructions),"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"movz    x1, 0x3c4d\nmovk    x1, 0x1a2b, lsl 16\n")),(0,i.kt)("h2",{id:"nasm-x86_64-cheat-sheet"},"NASM x86_64 cheat sheet"),(0,i.kt)("h2",{id:"gas-aarch64-cheat-sheet"},"GAS aarch64 cheat sheet"),(0,i.kt)("h2",{id:"assemblys-role-in-compiler"},"Assembly's Role in Compiler"),(0,i.kt)("p",null,"In the compiling process, a compiler such as ",(0,i.kt)("strong",{parentName:"p"},"GCC")," will translate ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," code into ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," code for different CPU architectures, then use its corresponding ",(0,i.kt)("strong",{parentName:"p"},"Assembler")," to translate the ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," code to the machine code which is CPU dependent."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," plays intermediate role in the compiler, while higher language like ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," sits upfront and machine code runs at the bottom."),(0,i.kt)("p",null,"I have another writing to introduce my understanding of the compiler from the practice more than the theoretical point of view, and how to write a compiler."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/blog/wiki-compiler"},"wiki compiler")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/mikesmullin/6259449"},"https://gist.github.com/mikesmullin/6259449")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs.lmu.edu/~ray/notes/nasmtasutorial/"},"https://cs.lmu.edu/~ray/notes/nasmtasutorial/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf"},"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html"},"http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs61.seas.harvard.edu/site/2018/Asm1/"},"https://cs61.seas.harvard.edu/site/2018/Asm1/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://web.stanford.edu/class/cs107/guide/x86-64.html"},"https://web.stanford.edu/class/cs107/guide/x86-64.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html"},"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cs.uaf.edu/2016/fall/cs301/lecture/09_28_machinecode.html"},"https://www.cs.uaf.edu/2016/fall/cs301/lecture/09_28_machinecode.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html"},"https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html"},"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/"},"https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pacman128.github.io/static/pcasm-book.pdf"},"https://pacman128.github.io/static/pcasm-book.pdf")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://redirect.cs.umbc.edu/portal/help/nasm/sample_64.shtml"},"https://redirect.cs.umbc.edu/portal/help/nasm/sample_64.shtml")))}d.isMDXComponent=!0}}]);