"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7332],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=i,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||l;return a?n.createElement(k,r(r({ref:t},m),{},{components:a})):n.createElement(k,r({ref:t},m))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},14841:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const l={foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/wiki-assembly.mdx"},authors:["frank"],tags:["Wiki Assembly"],description:"Wiki Assembly",keywords:["Wiki Assembly"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-11-22T00:00:00.000Z"),draft:!1,enableComments:!0},r="Wiki Assembly",o={permalink:"/blog/wiki-assembly",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/wiki-assembly.mdx",source:"@site/../../blog/wiki-assembly.mdx",title:"Wiki Assembly",description:"Wiki Assembly",date:"2023-11-22T00:00:00.000Z",formattedDate:"November 22, 2023",tags:[{label:"Wiki Assembly",permalink:"/blog/tags/wiki-assembly"}],readingTime:7.575,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{foam_template:{name:"Blog Docusaurus Template",description:"Creates Docusaurus blog/slip",filepath:"blog/wiki-assembly.mdx"},authors:["frank"],tags:["Wiki Assembly"],description:"Wiki Assembly",keywords:["Wiki Assembly"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-11-22T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Wiki Network",permalink:"/blog/wiki-network"},nextItem:{title:"Celery",permalink:"/blog/python-celery"}},s={authorsImageUrls:[void 0]},p=[{value:"Assembler",id:"assembler",level:2},{value:"XXX",id:"xxx",level:3},{value:"Section",id:"section",level:2},{value:"Label",id:"label",level:2},{value:"Instruction",id:"instruction",level:2},{value:"Opcode",id:"opcode",level:3},{value:"Oprand",id:"oprand",level:3},{value:"Register Operand",id:"register-operand",level:4},{value:"Immediate Operand",id:"immediate-operand",level:4},{value:"Memory Operand",id:"memory-operand",level:4},{value:"Instruction Encoding",id:"instruction-encoding",level:3},{value:"NASM x86_64 cheat sheet",id:"nasm-x86_64-cheat-sheet",level:2},{value:"GAS aarch64 cheat sheet",id:"gas-aarch64-cheat-sheet",level:2},{value:"Bootstrap a compiler for new language",id:"bootstrap-a-compiler-for-new-language",level:2},{value:"Where did the existing compiler <code>C1</code> come from?",id:"where-did-the-existing-compiler-c1-come-from",level:3},{value:"Compiler&#39;s job overview",id:"compilers-job-overview",level:3},{value:"Interpreter vs compiler",id:"interpreter-vs-compiler",level:3},{value:"Implementations",id:"implementations",level:3},{value:"Compiler for a subset of C language bootstrapping from Python",id:"compiler-for-a-subset-of-c-language-bootstrapping-from-python",level:3},{value:"Compiler for a subset of C language bootstrapping from C",id:"compiler-for-a-subset-of-c-language-bootstrapping-from-c",level:3},{value:"Compiler bootstrapping from assembly",id:"compiler-bootstrapping-from-assembly",level:3},{value:"Compiler bootstrapping from HEX",id:"compiler-bootstrapping-from-hex",level:3},{value:"Resources",id:"resources",level:2}],m={toc:p},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Why ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language is important to to learn?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The most low-level language that is closely tied to the hardware such as ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," code implements a symbolic (human-readable) representation of the binary machine code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," language is written to follow the ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU")," execution logic directly."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," language facilities a deeper understanding how ",(0,i.kt)("inlineCode",{parentName:"li"},"CPU")," actually do its job.")),(0,i.kt)("p",null,"Why ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language is critical elementary foundation to other higher-level language, E.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),"?"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," code is the important medium for compiling ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," code to machine code.\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," program being compiled to an binary object file, the ",(0,i.kt)("inlineCode",{parentName:"p"},"GCC")," compiler will do following:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"C")," code will be compiled into ",(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," code"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Assembly")," code will be translated into machine code")),(0,i.kt)("p",null,"Is ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language cross-platform?"),(0,i.kt)("p",null,"No, ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," language is specific in the specific platform. E.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"X86")," CPU-architecture has its own ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," instruction sets as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"arm")," CPU."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Assembly")," is CPU-dependent as machine code is CPU-dependent, while ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," language is CPU-independent for cross-platform."),(0,i.kt)("p",null,"Is the first version of ",(0,i.kt)("inlineCode",{parentName:"p"},"GCC")," written in ",(0,i.kt)("inlineCode",{parentName:"p"},"Assembly"),"?"),(0,i.kt)("p",null,"No, ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," started with the ",(0,i.kt)("inlineCode",{parentName:"p"},"BCPL")," language, ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/18125490/how-was-the-first-c-compiler-written"})),(0,i.kt)("h2",{id:"assembler"},"Assembler"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GNU assembler (GAS) ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"x86-64 GNU assembler ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"AT&T syntax"))),(0,i.kt)("li",{parentName:"ul"},"aarch64 GNU assembler",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"aarch64/arm64 syntax"))))),(0,i.kt)("li",{parentName:"ul"},"Clang Assembler",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"external Assembler",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"GNU Assembler"))),(0,i.kt)("li",{parentName:"ul"},"LLVM\u2019s integrated assembler"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/Toolchain.html#assembler"}),"  "))),(0,i.kt)("li",{parentName:"ul"},"Netwide assembler (NASM)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Intel syntax"),(0,i.kt)("li",{parentName:"ul"},"x86-64",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"macOS"),(0,i.kt)("li",{parentName:"ul"},"linux"),(0,i.kt)("li",{parentName:"ul"},"windows"))))),(0,i.kt)("li",{parentName:"ul"},"MASM",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Intel syntax")))),(0,i.kt)("h3",{id:"xxx"},"XXX"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm",metastring:'title="print.asm"',title:'"print.asm"'},'; print.asm\n; nasm -f elf64 print.asm && ld print.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .data\nmessage db, "Welcome,   to, Segmentation, Faults!, "\n\nsection .text\n\nglobal _start\n\n_printMessage:\n    mov rax, 4       ; System call number for sys_write\n    mov rbx, 1       ; File descriptor 1 is stdout\n    mov rcx, message ; Pointer to the message string\n    mov rdx, 32      ; Length of the message\n    int 0x80         ; Call kernel\n\n    ret ; Return from the function\n\n_exit:\n    mov rax, 1 ; System call number for sys_exit\n    mov rbx, 0 ; Exit code 0\n    int 0x80   ; Call kernel\n\n_start:\n    call _printMessage ; Call the print message function\n    mov  rax, 1        ; System call number for sys_exit\n    mov  rbx, 1        ; Exit code 0\n    int  0x80          ; Call kernel\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm",metastring:'title="sum.asm"',title:'"sum.asm"'},"; sum.asm\n; nasm -f elf64 sum.asm && ld sum.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .text\nglobal _start\n\n; Function to calculate the sum of two integers\nsum:\n    mov rax, rdi   ; Move the first argument (a) to rax\n    add rax, rsi   ; Add the second argument (b) to rax\n    ret            ; Return with the result in rax\n\n_start:\n    ; Example usage of the sum function\n    mov rdi, 5     ; First argument: a = 5\n    mov rsi, 7     ; Second argument: b = 7\n\n    call sum       ; Call the sum function\n\n    ; The result is now in rax\n    ; It can be used or printed, depending on the context\n    mov rdi, rax   ; Exit code 0\n\n    ; Exit the program\n    mov rax, 60    ; System call number for sys_exit\n    syscall        ; Make the system call\n")),(0,i.kt)("h2",{id:"section"},"Section"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},".text")," Section:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".text")," section is generally read-only. It is typically used for storing executable code, and it is not intended to be modified during program execution."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".text")," section contains the machine code instructions that the processor will execute."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".text")," section contains global constant data."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},".data")," Section:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".data")," section is writable. It is used for storing initialized data that can be modified during the execution of the program."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".data")," section contains global variable data.")))),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("h2",{id:"instruction"},"Instruction"),(0,i.kt)("p",null,"Assembly instructions are human readable representation of the machine code as CPU can only understand the machine code."),(0,i.kt)("p",null,"Instruction: Opcode + Oprand "),(0,i.kt)("h3",{id:"opcode"},"Opcode"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://sparksandflames.com/files/x86InstructionChart.html"},"Intel x86 Assembler Instruction Set Opcode Table")),(0,i.kt)("h3",{id:"oprand"},"Oprand"),(0,i.kt)("p",null,"Data area"),(0,i.kt)("h4",{id:"register-operand"},"Register Operand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov   rdi, rsi\n")),(0,i.kt)("h4",{id:"immediate-operand"},"Immediate Operand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov   rdi, 0x21\nmov   rdi, 5\nmov   edi, 0x21314151\n")),(0,i.kt)("p",null,"in ",(0,i.kt)("inlineCode",{parentName:"p"},"aarch64"),", the immediate value is subject to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Arithmetic instructions (add{s}, sub{s}, cmp, cmn) take a 12-bit unsigned immediate with an optional 12-bit left shift."),(0,i.kt)("li",{parentName:"ul"},"Move instructions (movz, movn, movk) take a 16-bit immediate optionally shifted to any 16-bit-aligned position within the register."),(0,i.kt)("li",{parentName:"ul"},"Address calculations (adr, adrp) take a 21-bit signed immediate, although there's no actual syntax to specify it directly - to do so you'd have to resort to assembler expression trickery to generate an appropriate \"label\"."),(0,i.kt)("li",{parentName:"ul"},'Logical instructions (and{s}, orr, eor, tst) take a "bitmask immediate".')),(0,i.kt)("h4",{id:"memory-operand"},"Memory Operand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov   rdi, [sdi]\n")),(0,i.kt)("h3",{id:"instruction-encoding"},"Instruction Encoding"),(0,i.kt)("p",null,"Assembler will encode the human-readable instruction into machine code."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"aarch64"),", the encoding instruction is ",(0,i.kt)("strong",{parentName:"li"},"fixed-size"),"(4 bytes) machine code."),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"x86_64"),", the encoding instruction is ",(0,i.kt)("strong",{parentName:"li"},"non-fixed-size"),"(up to 16 bytes) machine code.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://www.c-jump.com/CIS77/CPU/x86/lecture.html"},"Encoding Real x86 Instructions")),(0,i.kt)("p",null,"Let's have a glimpse on the impact of the ",(0,i.kt)("strong",{parentName:"p"},"fixed/non-fixed")," encoding."),(0,i.kt)("p",null,"In order to load 32-bit integer, ",(0,i.kt)("inlineCode",{parentName:"p"},"x86_64")," need only ",(0,i.kt)("strong",{parentName:"p"},"one")," instruction while more instructions are needed for ",(0,i.kt)("inlineCode",{parentName:"p"},"aarch64")," to do that."),(0,i.kt)("p",null,"Load a 32-bit integer ",(0,i.kt)("inlineCode",{parentName:"p"},"0x1a2b3c4d")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"x86_64"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"mov     rid, 0x1a2b3c4d\n")),(0,i.kt)("p",null,"Load a 32-bit integer 32-bit ",(0,i.kt)("inlineCode",{parentName:"p"},"0x1a2b3c4d")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"aarch64"),"(the immediate value in ",(0,i.kt)("inlineCode",{parentName:"p"},"mov")," must be in the range of ",(0,i.kt)("inlineCode",{parentName:"p"},"16-bit"),", so it needs ",(0,i.kt)("strong",{parentName:"p"},"two")," instructions),"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-asm"},"movz    x1, 0x3c4d\nmovk    x1, 0x1a2b, lsl 16\n")),(0,i.kt)("h2",{id:"nasm-x86_64-cheat-sheet"},"NASM x86_64 cheat sheet"),(0,i.kt)("h2",{id:"gas-aarch64-cheat-sheet"},"GAS aarch64 cheat sheet"),(0,i.kt)("h2",{id:"bootstrap-a-compiler-for-new-language"},"Bootstrap a compiler for new language"),(0,i.kt)("p",null,"New programming language and its corresponding compiler is mainly developed from an existing language. The progress is called ",(0,i.kt)("strong",{parentName:"p"},"bootstrapping"),", which can be summarized as,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"C1  + L1  -> C20\nC20 + L2u -> C21\nC21 + L2  -> C22\nC22 + L2  -> C23\nC23 + L2  -> C24\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"L1")," : an existing language\n",(0,i.kt)("inlineCode",{parentName:"p"},"C1")," : an existing compiler for language ",(0,i.kt)("inlineCode",{parentName:"p"},"L1"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"C20"),": a compiler written in language ",(0,i.kt)("inlineCode",{parentName:"p"},"L1")," for language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2u"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"C21"),": a compiler written in language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2u")," for language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"L2u"),": is subset of language ",(0,i.kt)("inlineCode",{parentName:"p"},"L2")),(0,i.kt)("p",null,"Bootstrapping stage:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Write a bootstrap compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20")," to understand language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2u"),"(a subset of language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2"),") in using existed language ",(0,i.kt)("inlineCode",{parentName:"li"},"L1")," and its corresponding compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C1"),"."),(0,i.kt)("li",{parentName:"ol"},"Use the compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20")," and language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2u")," to write the compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," to understand language ",(0,i.kt)("inlineCode",{parentName:"li"},"L2"),"."),(0,i.kt)("li",{parentName:"ol"},"Now ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," is a fully self-hosted compiler, as well as its descendants ",(0,i.kt)("inlineCode",{parentName:"li"},"C22"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"C23"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"C24"),".")),(0,i.kt)("h3",{id:"where-did-the-existing-compiler-c1-come-from"},"Where did the existing compiler ",(0,i.kt)("inlineCode",{parentName:"h3"},"C1")," come from?"),(0,i.kt)("p",null,"There is no need to use a compiler ",(0,i.kt)("inlineCode",{parentName:"p"},"C1")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"L1")," if you write the bootstrap compiler ",(0,i.kt)("inlineCode",{parentName:"p"},"C20")," in machine code. This solves the chicken-and-egg problem totally for programming languages."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Bootstrapping initial compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"A small and simple compiler is created manually in machine code or written in ",(0,i.kt)("inlineCode",{parentName:"li"},"assembly")," language."),(0,i.kt)("li",{parentName:"ol"},"[Option*]"," Translate the ",(0,i.kt)("inlineCode",{parentName:"li"},"assembly")," language into machine code manually if it's not written in machine code."),(0,i.kt)("li",{parentName:"ol"},"The initial compiler is just capable enough to understand a subset of the target language ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," it is supposed to compile."))),(0,i.kt)("li",{parentName:"ol"},"Use the initial compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C20")," to compile the compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," written in language ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," while the ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," is also supposed to compile language ",(0,i.kt)("inlineCode",{parentName:"li"},"C"),"."),(0,i.kt)("li",{parentName:"ol"},"Now compiler ",(0,i.kt)("inlineCode",{parentName:"li"},"C21")," a fully self-compilation.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a"},"Strange Loops: Ken Thompson and the Self-referencing C Compiler | ScienceBlogs")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29"},"Bootstrapping (compilers) - Wikipedia")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools"},"Compilers: Principles, Techniques, and Tools - Wikipedia")),(0,i.kt)("h3",{id:"compilers-job-overview"},"Compiler's job overview"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"lexer(Lexical analysis)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"generate tokens from source code"))),(0,i.kt)("li",{parentName:"ol"},"parser",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"construct abstract syntax tree(AST) from tokens"))),(0,i.kt)("li",{parentName:"ol"},"code generation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"generate low-level code, such as assembly code or machine code")))),(0,i.kt)("h3",{id:"interpreter-vs-compiler"},"Interpreter vs compiler"),(0,i.kt)("p",null,"an ",(0,i.kt)("strong",{parentName:"p"},"interpreter")," also does ",(0,i.kt)("inlineCode",{parentName:"p"},"lexer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parser")," jobs as a compiler does in step 1 and 2, but instead of generating low-level code, the ",(0,i.kt)("strong",{parentName:"p"},"interpreter")," generates the results."),(0,i.kt)("h3",{id:"implementations"},"Implementations"),(0,i.kt)("p",null,"Interpreter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rswier/c4"},"GitHub - rswier/c4: C in four functions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lotabout/write-a-C-interpreter"},"GitHub - lotabout/write-a-C-interpreter: Write a simple interpreter of C. Inspired by c4 and largely based on it."))),(0,i.kt)("p",null,"Self-hosted Compiler:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/DoctorWkt/acwj"},"GitHub - DoctorWkt/acwj: A Compiler Writing Journey")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/certik/bcompile"},"GitHub - certik/bcompile: Bootstrapping a simple compiler from nothing"))),(0,i.kt)("p",null,"The basic knowledge of ",(0,i.kt)("inlineCode",{parentName:"p"},"lexer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parser")," is critical and necessary for developing a programming language, "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flex/lex")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"yacc/parser"))),(0,i.kt)("h3",{id:"compiler-for-a-subset-of-c-language-bootstrapping-from-python"},"Compiler for a subset of C language bootstrapping from Python"),(0,i.kt)("p",null,"Recently, I am becoming interested in building a ",(0,i.kt)("inlineCode",{parentName:"p"},"lexer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parser")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"code generator")," to try to create a mini language and deep insight of how ",(0,i.kt)("inlineCode",{parentName:"p"},"GCC")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Clang/LLVM")," do their jobs."),(0,i.kt)("p",null,"For educational purposes, learning in practice is my favorite approach to grasp an overview."),(0,i.kt)("p",null,"Let's do it!"),(0,i.kt)("p",null,"Prerequisites:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Python for writing the bootstrap compiler ")),(0,i.kt)("p",null,"I use ",(0,i.kt)("a",{parentName:"p",href:"https://ply.readthedocs.io/_/downloads/en/latest/pdf/"},"ply"),", a pure Python implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"lex")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"yacc")," tools to facilitate me to write the bootstrap compiler for the subset of C language."),(0,i.kt)("h3",{id:"compiler-for-a-subset-of-c-language-bootstrapping-from-c"},"Compiler for a subset of C language bootstrapping from C"),(0,i.kt)("p",null,"Prerequisites:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An existing ",(0,i.kt)("inlineCode",{parentName:"li"},"GCC")," for writing the bootstrap compiler")),(0,i.kt)("p",null,"Here are some popular tutorials from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/DoctorWkt/acwj"},"GitHub - DoctorWkt/acwj: A Compiler Writing Journey"),"."),(0,i.kt)("p",null,"You can also refer ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lotabout/write-a-C-interpreter"},"GitHub - lotabout/write-a-C-interpreter")," although I prefer classifying it as ",(0,i.kt)("strong",{parentName:"p"},"interpreter")," not a complete compiler."),(0,i.kt)("h3",{id:"compiler-bootstrapping-from-assembly"},"Compiler bootstrapping from assembly"),(0,i.kt)("h3",{id:"compiler-bootstrapping-from-hex"},"Compiler bootstrapping from HEX"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/certik/bcompile"},"GitHub - certik/bcompile: Bootstrapping a simple compiler from nothing")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/mikesmullin/6259449"},"https://gist.github.com/mikesmullin/6259449")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs.lmu.edu/~ray/notes/nasmtasutorial/"},"https://cs.lmu.edu/~ray/notes/nasmtasutorial/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf"},"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html"},"http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cs61.seas.harvard.edu/site/2018/Asm1/"},"https://cs61.seas.harvard.edu/site/2018/Asm1/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://web.stanford.edu/class/cs107/guide/x86-64.html"},"https://web.stanford.edu/class/cs107/guide/x86-64.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html"},"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cs.uaf.edu/2016/fall/cs301/lecture/09_28_machinecode.html"},"https://www.cs.uaf.edu/2016/fall/cs301/lecture/09_28_machinecode.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html"},"https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html"},"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/"},"https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pacman128.github.io/static/pcasm-book.pdf"},"https://pacman128.github.io/static/pcasm-book.pdf")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://redirect.cs.umbc.edu/portal/help/nasm/sample_64.shtml"},"https://redirect.cs.umbc.edu/portal/help/nasm/sample_64.shtml")))}c.isMDXComponent=!0}}]);