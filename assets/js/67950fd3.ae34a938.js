"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5161],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=d(n),y=i,u=p["".concat(s,".").concat(y)]||p[y]||h[y]||r;return n?a.createElement(u,c(c({ref:t},l),{},{components:n})):a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,c=new Array(r);c[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,c[1]=o;for(var d=2;d<r;d++)c[d]=n[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},45884:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={authors:["frank"],tags:["Python","Unicode","ctypes"],description:"Python Unicode",keywords:["Python Unicode","memory layout"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-12-13T00:00:00.000Z"),draft:!1,enableComments:!0},c="Python Unicode",o={permalink:"/blog/python-unicode",editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../blog/python-unicode.mdx",source:"@site/../../blog/python-unicode.mdx",title:"Python Unicode",description:"Python Unicode",date:"2023-12-13T00:00:00.000Z",formattedDate:"December 13, 2023",tags:[{label:"Python",permalink:"/blog/tags/python"},{label:"Unicode",permalink:"/blog/tags/unicode"},{label:"ctypes",permalink:"/blog/tags/ctypes"}],readingTime:8.495,hasTruncateMarker:!0,authors:[{name:"Frank Chen",title:"Maintainer of Docusaurus",url:"https://github.com/liviaerxin",imageURL:"https://github.com/liviaerxin.png",key:"frank"}],frontMatter:{authors:["frank"],tags:["Python","Unicode","ctypes"],description:"Python Unicode",keywords:["Python Unicode","memory layout"],image:"https://i.imgur.com/mErPwqL.png",date:"2023-12-13T00:00:00.000Z",draft:!1,enableComments:!0},prevItem:{title:"Python C Library",permalink:"/blog/python-c-library"},nextItem:{title:"Wiki Cryptography",permalink:"/blog/wiki-cryptography"}},s={authorsImageUrls:[void 0]},d=[{value:"Why Python doesn&#39;t use UTF-8 encoding variable-length bytes in memory?",id:"why-python-doesnt-use-utf-8-encoding-variable-length-bytes-in-memory",level:2},{value:"How other programming languages access string by index?",id:"how-other-programming-languages-access-string-by-index",level:2},{value:"An outline of the <code>PyUnicodeObject</code>",id:"an-outline-of-the-pyunicodeobject",level:2},{value:"How a Unicode string object is created?",id:"how-a-unicode-string-object-is-created",level:2},{value:"Inspect Unicode string object in Python 3",id:"inspect-unicode-string-object-in-python-3",level:2},{value:"Resources",id:"resources",level:2}],l={toc:d},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Python string use ",(0,i.kt)("inlineCode",{parentName:"p"},"unicodeobject")," which is implemented in ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," in CPython:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/python/cpython/blob/main/Objects/unicodeobject.c"},"unicodeobject.c")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/python/cpython/blob/main/Include/cpython/unicodeobject.h"},"unicodeobject.h"))),(0,i.kt)("p",null,"Python chooses one of these three kinds of data type to internally represent for a Unicode-characters string, so every Unicode character of the string has the same fixed-length: 1, 2 or 4,"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"UCS-1"),"(1 byte), for ASCII characters between U+0000 and U+00FF"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"UCS-2"),"(2 bytes), for Unicode characters between U+00FF and U+FFFF"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"UCS-4"),"(4 bytes), for Unicode characters between U+00FFFF and U+10FFFF")),(0,i.kt)("p",null,"There are 4 forms of Unicode strings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"compact ascii"),(0,i.kt)("li",{parentName:"ul"},"compact"),(0,i.kt)("li",{parentName:"ul"},"legacy string"),(0,i.kt)("li",{parentName:"ul"},"legacy string ready")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"legacy string"),' as I see is already deprecated after Python3 and the official says: "it will be removed after Python 4".'),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"compact")," make the ",(0,i.kt)("inlineCode",{parentName:"p"},"characters")," data start just after the ",(0,i.kt)("inlineCode",{parentName:"p"},"PyASCIIObject")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"PyCompactUnicodeObject")," structure, using just one block, whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"legacy strings")," use one block for the structure and one block for ",(0,i.kt)("inlineCode",{parentName:"p"},"characters"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"characters")," data are 1-byte, 2-byte or 4-byte ",(0,i.kt)("inlineCode",{parentName:"p"},"code point"),". The UnicodeObject will use the maximum length in fixed-size for each."),(0,i.kt)("h2",{id:"why-python-doesnt-use-utf-8-encoding-variable-length-bytes-in-memory"},"Why Python doesn't use UTF-8 encoding variable-length bytes in memory?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Indexing into strings in Python is operated in a constant time, as it's based on the fixed-length encodings.")),(0,i.kt)("h2",{id:"how-other-programming-languages-access-string-by-index"},"How other programming languages access string by index?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Go",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Iterating yields Unicode code point"),(0,i.kt)("li",{parentName:"ul"},"Indexing yields a byte"))),(0,i.kt)("li",{parentName:"ul"},"Rust",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Iteration yields Unicode code point(",(0,i.kt)("inlineCode",{parentName:"li"},"method.chars()"),") or byte(",(0,i.kt)("inlineCode",{parentName:"li"},"method.bytes"),")"),(0,i.kt)("li",{parentName:"ul"},"Indexing not supported"))),(0,i.kt)("li",{parentName:"ul"},"Python",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Iterating yields Unicode code point"),(0,i.kt)("li",{parentName:"ul"},"Indexing yields Unicode code point")))),(0,i.kt)("h2",{id:"an-outline-of-the-pyunicodeobject"},"An outline of the ",(0,i.kt)("inlineCode",{parentName:"h2"},"PyUnicodeObject")),(0,i.kt)("p",null,"References are mainly from:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/ctypes.html"},"ctypes \u2014 A foreign function library for Python \u2014 Python 3.12.1 documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/python/cpython/blob/3aea6c4823e90172c9bc36cd20dc51b295d8a3c4/Include/cpython/unicodeobject.h#L53"},"unicodeobject.h"))),(0,i.kt)("p",null,"A brief ",(0,i.kt)("inlineCode",{parentName:"p"},"PyUnicodeObject")," structure defined from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/python/cpython/blob/3aea6c4823e90172c9bc36cd20dc51b295d8a3c4/Include/cpython/unicodeobject.h#L53"},"unicodeobject.h"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="cpython/Include/cpython/unicodeobject.h"',title:'"cpython/Include/cpython/unicodeobject.h"'},"typedef struct {\n    Py_ssize_t ob_refcnt;\n    PyTypeObject *ob_type;\n} PyObject\n/* --- Unicode Type ------------------------------------------------------- */\ntypedef struct {\n    /* There are 4 forms of Unicode strings:\n\n       - compact ascii:\n\n         * structure = PyASCIIObject\n         * test: PyUnicode_IS_COMPACT_ASCII(op)\n         * kind = PyUnicode_1BYTE_KIND\n         * compact = 1\n         * ascii = 1\n         * ready = 1\n         * (length is the length of the utf8 and wstr strings)\n         * (data starts just after the structure)\n         * (since ASCII is decoded from UTF-8, the utf8 string are the data)\n\n       - compact:\n\n         * structure = PyCompactUnicodeObject\n         * test: PyUnicode_IS_COMPACT(op) && !PyUnicode_IS_ASCII(op)\n         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or\n           PyUnicode_4BYTE_KIND\n         * compact = 1\n         * ready = 1\n         * ascii = 0\n         * utf8 is not shared with data\n         * utf8_length = 0 if utf8 is NULL\n         * wstr is shared with data and wstr_length=length\n           if kind=PyUnicode_2BYTE_KIND and sizeof(wchar_t)=2\n           or if kind=PyUnicode_4BYTE_KIND and sizeof(wchar_t)=4\n         * wstr_length = 0 if wstr is NULL\n         * (data starts just after the structure)\n\n       - legacy string, not ready:\n\n         * structure = PyUnicodeObject\n         * test: kind == PyUnicode_WCHAR_KIND\n         * length = 0 (use wstr_length)\n         * hash = -1\n         * kind = PyUnicode_WCHAR_KIND\n         * compact = 0\n         * ascii = 0\n         * ready = 0\n         * interned = SSTATE_NOT_INTERNED\n         * wstr is not NULL\n         * data.any is NULL\n         * utf8 is NULL\n         * utf8_length = 0\n\n       - legacy string, ready:\n\n         * structure = PyUnicodeObject structure\n         * test: !PyUnicode_IS_COMPACT(op) && kind != PyUnicode_WCHAR_KIND\n         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or\n           PyUnicode_4BYTE_KIND\n         * compact = 0\n         * ready = 1\n         * data.any is not NULL\n         * utf8 is shared and utf8_length = length with data.any if ascii = 1\n         * utf8_length = 0 if utf8 is NULL\n         * wstr is shared with data.any and wstr_length = length\n           if kind=PyUnicode_2BYTE_KIND and sizeof(wchar_t)=2\n           or if kind=PyUnicode_4BYTE_KIND and sizeof(wchar_4)=4\n         * wstr_length = 0 if wstr is NULL\n\n       Compact strings use only one memory block (structure + characters),\n       whereas legacy strings use one block for the structure and one block\n       for characters.\n\n       Legacy strings are created by PyUnicode_FromUnicode() and\n       PyUnicode_FromStringAndSize(NULL, size) functions. They become ready\n       when PyUnicode_READY() is called.\n\n       See also _PyUnicode_CheckConsistency().\n    */\n    PyObject_HEAD\n    Py_ssize_t length;          /* Number of code points in the string */\n    Py_hash_t hash;             /* Hash value; -1 if not set */\n    struct {\n        /*\n           SSTATE_NOT_INTERNED (0)\n           SSTATE_INTERNED_MORTAL (1)\n           SSTATE_INTERNED_IMMORTAL (2)\n\n           If interned != SSTATE_NOT_INTERNED, the two references from the\n           dictionary to this object are *not* counted in ob_refcnt.\n         */\n        unsigned int interned:2;\n        /* Character size:\n\n           - PyUnicode_WCHAR_KIND (0):\n\n             * character type = wchar_t (16 or 32 bits, depending on the\n               platform)\n\n           - PyUnicode_1BYTE_KIND (1):\n\n             * character type = Py_UCS1 (8 bits, unsigned)\n             * all characters are in the range U+0000-U+00FF (latin1)\n             * if ascii is set, all characters are in the range U+0000-U+007F\n               (ASCII), otherwise at least one character is in the range\n               U+0080-U+00FF\n\n           - PyUnicode_2BYTE_KIND (2):\n\n             * character type = Py_UCS2 (16 bits, unsigned)\n             * all characters are in the range U+0000-U+FFFF (BMP)\n             * at least one character is in the range U+0100-U+FFFF\n\n           - PyUnicode_4BYTE_KIND (4):\n\n             * character type = Py_UCS4 (32 bits, unsigned)\n             * all characters are in the range U+0000-U+10FFFF\n             * at least one character is in the range U+10000-U+10FFFF\n         */\n        unsigned int kind:3;\n        /* Compact is with respect to the allocation scheme. Compact unicode\n           objects only require one memory block while non-compact objects use\n           one block for the PyUnicodeObject struct and another for its data\n           buffer. */\n        unsigned int compact:1;\n        /* The string only contains characters in the range U+0000-U+007F (ASCII)\n           and the kind is PyUnicode_1BYTE_KIND. If ascii is set and compact is\n           set, use the PyASCIIObject structure. */\n        unsigned int ascii:1;\n        /* The ready flag indicates whether the object layout is initialized\n           completely. This means that this is either a compact object, or\n           the data pointer is filled out. The bit is redundant, and helps\n           to minimize the test in PyUnicode_IS_READY(). */\n        unsigned int ready:1;\n        /* Padding to ensure that PyUnicode_DATA() is always aligned to\n           4 bytes (see issue #19537 on m68k). */\n        unsigned int :24;\n    } state;\n    wchar_t *wstr;              /* wchar_t representation (null-terminated) */\n} PyASCIIObject;\n\n/* Non-ASCII strings allocated through PyUnicode_New use the\n   PyCompactUnicodeObject structure. state.compact is set, and the data\n   immediately follow the structure. */\ntypedef struct {\n    PyASCIIObject _base;\n    Py_ssize_t utf8_length;     /* Number of bytes in utf8, excluding the\n                                 * terminating \\0. */\n    char *utf8;                 /* UTF-8 representation (null-terminated) */\n    Py_ssize_t wstr_length;     /* Number of code points in wstr, possible\n                                 * surrogates count as two code points. */\n} PyCompactUnicodeObject;\n\n/* Strings allocated through PyUnicode_FromUnicode(NULL, len) use the\n   PyUnicodeObject structure. The actual string data is initially in the wstr\n   block, and copied into the data block using _PyUnicode_Ready. */\ntypedef struct {\n    PyCompactUnicodeObject _base;\n    union {\n        void *any;\n        Py_UCS1 *latin1;\n        Py_UCS2 *ucs2;\n        Py_UCS4 *ucs4;\n    } data;                     /* Canonical, smallest-form Unicode buffer */\n} PyUnicodeObject;\n")),(0,i.kt)("p",null,"As it's known that each Unicode character in string is represented by a Unicode code point. In ",(0,i.kt)("inlineCode",{parentName:"p"},"PyUnicodeObject"),", these code points are the encoding saved in the ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", so ",(0,i.kt)("inlineCode",{parentName:"p"},"PyUnicodeObject")," does not use the ",(0,i.kt)("inlineCode",{parentName:"p"},"UTF-8")," encoding in the ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),"."),(0,i.kt)("h2",{id:"how-a-unicode-string-object-is-created"},"How a Unicode string object is created?"),(0,i.kt)("p",null,"Invokes several internal C functions in such a sequence generally,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"PyObject *PyUnicode_FromStringAndSize(const char *str, Py_ssize_t size)\n\nPyObject *PyUnicode_DecodeUTF8Stateful(const char *str, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)\n\nstatic PyObject *unicode_decode_utf8(const char *s, Py_ssize_t size, _Py_error_handler error_handler, const char *errors, Py_ssize_t *consumed)\n\nPyObject *PyUnicode_New(Py_ssize_t size, Py_UCS4 maxchar)\n\nstatic Py_ssize_t ascii_decode(const char *start, const char *end, Py_UCS1 *dest)\n\nch = ucs2lib_utf8_decode(&s, end, writer.data, &writer.pos);\n\n// ucs2lib.h\n#define STRINGLIB(F)             ucs2lib_##F\nSTRINGLIB(utf8_decode)(const char **inptr, const char *end,\n                       STRINGLIB_CHAR *dest,\n                       Py_ssize_t *outpos)\n\n")),(0,i.kt)("h2",{id:"inspect-unicode-string-object-in-python-3"},"Inspect Unicode string object in Python 3"),(0,i.kt)("p",null,"Let's examine the internal data struct of a string object in modern Python 3."),(0,i.kt)("p",null,":::NOTE\nYou keep the character being referred otherwise the ",(0,i.kt)("inlineCode",{parentName:"p"},"GC")," may release that memory,"),(0,i.kt)("p",null,"Define the layout mapping ",(0,i.kt)("inlineCode",{parentName:"p"},"unicodeobject"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import ctypes\n\n# It\'s recommended to go to see [python 3.10 unicodeobject.h](https://github.com/python/cpython/blob/3.10/Include/cpython/unicodeobject.h#L85-L244)\nclass PyASCIIObject(ctypes.Structure):\n    # internal fields of the string object\n    _fields_ = [\n        ("ob_refcnt", ctypes.c_long),\n        ("ob_type", ctypes.c_void_p),\n        ("length", ctypes.c_ssize_t),\n        ("hash", ctypes.c_ssize_t),\n        ("interned", ctypes.c_uint, 2),\n        ("kind", ctypes.c_uint, 3),\n        ("compact", ctypes.c_uint, 1),\n        ("ascii", ctypes.c_uint, 1),\n        ("ready", ctypes.c_uint, 1),\n        ("_padding", ctypes.c_uint, 24),\n        ("wstr", ctypes.POINTER(ctypes.c_wchar))\n    ]\n\n    def __repr__(self) -> str:\n        return f"ob_refcnt[{self.ob_refcnt}], length[{self.length}], interned[{self.interned}], kind[{self.kind}], compact[{self.compact}], ascii[{self.ascii}], ready[{self.ready}]"\n    \nclass PyCompactUnicodeObject(PyASCIIObject):\n    # internal fields of the string object\n    _fields_ = [\n        ("utf8_length", ctypes.c_ssize_t),\n        ("utf8", ctypes.POINTER(ctypes.c_char)),\n        ("wstr_length", ctypes.c_ssize_t),\n    ]\n\n    def __repr__(self) -> str:\n        return super().__repr__() + f" utf8_length[{self.utf8_length}], utf8[{self.utf8}], wstr_length[{self.wstr_length}]"\n    \nclass PyUnicodeObject(PyCompactUnicodeObject):\n    class _Data(ctypes.Union):\n        _fields_ = [\n            ("any", ctypes.c_void_p),\n            ("latin1", ctypes.POINTER(ctypes.c_uint8)),\n            ("ucs2", ctypes.POINTER(ctypes.c_uint16)),\n            ("ucs4", ctypes.POINTER(ctypes.c_uint32)),\n        ]\n    \n    _fields_ = [\n        ("data", _Data),\n    ]\n')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Type: compact ascii. Key fields: kind","[1]",", compact","[1]",", ascii","[1]",", ready","[1]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'>>> string_obj = "Hello, ctypes!"\n>>> addr = id(string_obj)\n>>> ascii_obj = PyASCIIObject.from_address(addr)\n>>> print(ascii_obj)\nob_refcnt[1], length[14], interned[0], kind[1], compact[1], ascii[1], ready[1]\n>>>\n>>> # compact ascii: data starts just after the structure\n>>> data_addr = addr + ctypes.sizeof(PyASCIIObject)\n>>> data = ctypes.cast(data_addr, ctypes.c_char_p)\n>>> print(f"data: {data.value}")\ndata: b\'Hello, ctypes!\'\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Type: compact ",(0,i.kt)("inlineCode",{parentName:"li"},"UCS-2"),". Key fields: kind","[1]",", compact","[1]",", ascii","[1]",", ready","[1]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'>>> string_obj = "\u4f60\u597d!"\n>>> addr = id(string_obj)\n>>> ascii_obj = PyASCIIObject.from_address(addr)\n>>> print(ascii_obj)\nob_refcnt[1], length[3], interned[0], kind[2], compact[1], ascii[0], ready[1]\n>>>\n>>> compact_obj = PyCompactUnicodeObject.from_address(addr)\n>>> print(compact_obj)\nob_refcnt[1], length[3], interned[0], kind[2], compact[1], ascii[0], ready[1] utf8_length[0], utf8[<ctypes.LP_c_char object at 0x7f0c29297ac\n0>], wstr_length[0]\n>>>\n>>> # compact: data starts just after the structure\n>>> data_addr = addr + ctypes.sizeof(PyCompactUnicodeObject)\n>>> data = ctypes.cast(data_addr, ctypes.POINTER(ctypes.c_uint16))\n>>> print(f"data: {data[0]}, {data[0]:#06x}, {chr(data[0])}")\ndata: 20320, 0x4f60, \u4f60\n>>> print(f"data: {data[1]}, {data[1]:#06x}, {chr(data[1])}")\ndata: 22909, 0x597d, \u597d\n>>> print(f"data: {data[2]}, {data[2]:#06x}, {chr(data[2])}")\ndata: 33, 0x0021, !\n>>> print(f"data: {data[3]}, {data[3]:#06x}, {chr(data[3])}")\ndata: 0, 0x0000,\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Type: compact ",(0,i.kt)("inlineCode",{parentName:"li"},"UCS-4"),". Key fields: kind","[4]",", compact","[1]",", ascii","[1]",", ready","[1]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'>>> string_obj = "\u4f60\u597d\ud83e\udd28"\n>>> addr = id(string_obj)\n>>> ascii_obj = PyASCIIObject.from_address(addr)\n>>> print(ascii_obj)\nob_refcnt[1], length[3], interned[0], kind[4], compact[1], ascii[0], ready[1]\n>>>\n>>> compact_obj = PyCompactUnicodeObject.from_address(addr)\n>>> print(compact_obj)\nob_refcnt[1], length[3], interned[0], kind[4], compact[1], ascii[0], ready[1] utf8_length[0], utf8[<ctypes.LP_c_char object at 0x7f0c292b1ac\n0>], wstr_length[3]\n>>>\n>>> # compact: data starts just after the structure\n>>> data_addr = addr + ctypes.sizeof(PyCompactUnicodeObject)\n>>> data = ctypes.cast(data_addr, ctypes.POINTER(ctypes.c_uint32))\n>>> print(f"data: {data[0]}, {data[0]:#010x}, {chr(data[0])}")\ndata: 20320, 0x00004f60, \u4f60\n>>> print(f"data: {data[1]}, {data[1]:#010x}, {chr(data[1])}")\ndata: 22909, 0x0000597d, \u597d\n>>> print(f"data: {data[2]}, {data[2]:#010x}, {chr(data[2])}")\ndata: 129320, 0x0001f928, \ud83e\udd28\n>>> print(f"data: {data[3]}, {data[3]:#010x}, {chr(data[3])}")\ndata: 0, 0x00000000,\n')),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Type: legacy string. Key fields: kind","[2]",", compact","[0]",", ascii","[0]")),(0,i.kt)("p",null,"I can't produce it in Python3.10, maybe you can try python2.7. "),(0,i.kt)("p",null,"All codes are at ",(0,i.kt)("a",{target:"_blank",href:n(97918).Z},"object layout")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://rushter.com/blog/python-strings-and-memory/"},"How Python saves memory when storing strings | Artem Golubin")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://tenthousandmeters.com/blog/python-behind-the-scenes-9-how-python-strings-work/"},"Python behind the scenes #9: how Python strings work")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nedbatchelder.com/text/unipain.html"},"https://nedbatchelder.com/text/unipain.html")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"},"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/")))}h.isMDXComponent=!0},97918:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/object_reflection-3a30ad418d944b9ac37a04c539e7f746.py"}}]);